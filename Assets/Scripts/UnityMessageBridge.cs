using UnityEngine;

public class UnityMessageBridge : MonoBehaviour
{
      [Tooltip("–°—Å—ã–ª–∫–∞ –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–º.")]
      [SerializeField]
      private AsyncSegmentationManager segmentationManager;

      void Start()
      {
            // –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ –æ–Ω –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –≤ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–µ
            if (segmentationManager == null)
            {
                  segmentationManager = FindObjectOfType<AsyncSegmentationManager>();
                  if (segmentationManager == null)
                  {
                        Debug.LogError("UnityMessageBridge: AsyncSegmentationManager –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ü–µ–Ω–µ! –ü–æ–∫—Ä–∞—Å–∫–∞ –∏–∑ Flutter –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.");
                  }
            }
      }

      /// <summary>
      /// –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ Flutter –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–≤–µ—Ç–∞ –ø–æ–∫—Ä–∞—Å–∫–∏.
      /// </summary>
      /// <param name="hexColor">–°—Ç—Ä–æ–∫–∞ —Å —Ü–≤–µ—Ç–æ–º –≤ HEX-—Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "#RRGGBB").</param>
      public void SetPaintColorFromHex(string hexColor)
      {
            if (segmentationManager == null)
            {
                  Debug.LogError("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–≤–µ—Ç: AsyncSegmentationManager –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                  return;
            }

            if (string.IsNullOrEmpty(hexColor))
            {
                  Debug.LogError("–ü–æ–ª—É—á–µ–Ω–∞ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ —Ü–≤–µ—Ç–∞.");
                  return;
            }

            Color newColor;
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º ColorUtility –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ HEX-—Å—Ç—Ä–æ–∫–∏
            if (ColorUtility.TryParseHtmlString(hexColor, out newColor))
            {
                  Debug.Log($"üé® –ü–æ–ª—É—á–µ–Ω —Ü–≤–µ—Ç –∏–∑ Flutter: {hexColor}. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ –¥–ª—è –ø–æ–∫—Ä–∞—Å–∫–∏.");
                  segmentationManager.SetPaintColor(newColor);
            }
            else
            {
                  Debug.LogError($"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å HEX-—Ü–≤–µ—Ç: {hexColor}");
            }
      }
}