using UnityEngine;
using UnityEngine.XR.ARFoundation;
using UnityEngine.XR.ARSubsystems;
using Unity.XR.CoreUtils;
using UnityEngine.UI;
using TMPro;
using UnityEditor;

/// <summary>
/// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä AR Painting —Å–∏—Å—Ç–µ–º—ã
/// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å—Ü–µ–Ω—É —Å –æ–¥–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
/// </summary>
public class ARPaintingIntegrator : MonoBehaviour
{
      [Header("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è")]
      [SerializeField] private bool autoSetupOnStart = true;
      [SerializeField] private bool createUIElements = true;
      [SerializeField] private bool enablePerformanceMonitoring = true;

      [Header("Prefab References (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")]
      [SerializeField] private GameObject arSessionPrefab;
      [SerializeField] private GameObject arCameraPrefab;
      [SerializeField] private Material paintMaterial;

      // –°—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
      private GameObject arSession;
      private GameObject arCamera;
      private Canvas mainCanvas;
      private AsyncSegmentationManager segmentationManager;
      private PerformanceMonitor performanceMonitor;
      private UIManager uiManager;

      void Start()
      {
            if (autoSetupOnStart)
            {
                  SetupARPaintingSystem();
            }
      }

      [ContextMenu("Setup AR Painting System")]
      public void SetupARPaintingSystem()
      {
            Debug.Log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é AR Painting —Å–∏—Å—Ç–µ–º—ã...");

            try
            {
                  // –®–∞–≥ 1: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ AR Foundation
                  SetupARFoundation();

                  // –®–∞–≥ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                  SetupCoreComponents();

                  // –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ UI
                  if (createUIElements)
                  {
                        SetupUI();
                  }

                  // –®–∞–≥ 4: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                  if (enablePerformanceMonitoring)
                  {
                        SetupPerformanceMonitoring();
                  }

                  // –®–∞–≥ 5: –°–≤—è–∑—ã–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                  LinkComponents();

                  Debug.Log("‚úÖ AR Painting —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞!");

#if UNITY_EDITOR
                  EditorUtility.SetDirty(gameObject);
#endif
            }
            catch (System.Exception e)
            {
                  Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e.Message}");
            }
      }

      void SetupARFoundation()
      {
            Debug.Log("üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∞ AR Foundation...");

            // –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º AR Session
            var existingSession = FindObjectOfType<ARSession>();
            if (existingSession == null)
            {
                  arSession = new GameObject("AR Session");
                  arSession.AddComponent<ARSession>();
                  Debug.Log("‚úÖ AR Session —Å–æ–∑–¥–∞–Ω");
            }
            else
            {
                  arSession = existingSession.gameObject;
                  Debug.Log("‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π AR Session");
            }

            // –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º XR Origin  
            var existingSessionOrigin = FindObjectOfType<XROrigin>();
            if (existingSessionOrigin == null)
            {
                  var sessionOrigin = new GameObject("XR Origin");
                  var xrOrigin = sessionOrigin.AddComponent<XROrigin>();

                  // –°–æ–∑–¥–∞–µ–º AR Camera
                  var cameraGO = new GameObject("AR Camera");
                  cameraGO.transform.SetParent(sessionOrigin.transform);

                  var camera = cameraGO.AddComponent<Camera>();
                  camera.clearFlags = CameraClearFlags.Color;
                  camera.backgroundColor = Color.black;
                  camera.nearClipPlane = 0.1f;
                  camera.farClipPlane = 20f;

                  cameraGO.AddComponent<ARCameraManager>();
                  cameraGO.AddComponent<ARCameraBackground>();

                  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—à–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                  cameraGO.AddComponent<CameraFeedCapture>();
                  cameraGO.AddComponent<SurfaceHighlighter>();

                  // –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –æ–∫–∫–ª—é–∑–∏–∏ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è
                  var occlusionManager = cameraGO.AddComponent<AROcclusionManager>();
                  occlusionManager.requestedEnvironmentDepthMode = EnvironmentDepthMode.Best;

                  arCamera = cameraGO;

                  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ XR Origin
                  xrOrigin.Camera = camera;

                  Debug.Log("‚úÖ AR Session Origin –∏ AR Camera —Å–æ–∑–¥–∞–Ω—ã");
            }
            else
            {
                  arCamera = existingSessionOrigin.Camera.gameObject;

                  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—à–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞–º–µ—Ä–µ
                  if (arCamera.GetComponent<CameraFeedCapture>() == null)
                  {
                        arCamera.AddComponent<CameraFeedCapture>();
                  }

                  if (arCamera.GetComponent<SurfaceHighlighter>() == null)
                  {
                        arCamera.AddComponent<SurfaceHighlighter>();
                  }

                  // –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –æ–∫–∫–ª—é–∑–∏–∏, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                  if (arCamera.GetComponent<AROcclusionManager>() == null)
                  {
                        var occlusionManager = arCamera.AddComponent<AROcclusionManager>();
                        occlusionManager.requestedEnvironmentDepthMode = EnvironmentDepthMode.Best;
                        Debug.Log("‚úÖ AR Occlusion Manager –¥–æ–±–∞–≤–ª–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
                  }

                  Debug.Log("‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π XR Origin");
            }

            // –î–æ–±–∞–≤–ª—è–µ–º AR Mesh Manager –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π
            var sessionOriginComponent = FindObjectOfType<XROrigin>();
            if (sessionOriginComponent.GetComponent<ARMeshManager>() == null)
            {
                  sessionOriginComponent.gameObject.AddComponent<ARMeshManager>();
                  Debug.Log("‚úÖ AR Mesh Manager –¥–æ–±–∞–≤–ª–µ–Ω");
            }
      }

      void SetupCoreComponents()
      {
            Debug.Log("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...");

            // –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—ã–π GameObject –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            var coreManager = new GameObject("AR Painting Core");

            // –î–æ–±–∞–≤–ª—è–µ–º AsyncSegmentationManager
            segmentationManager = coreManager.AddComponent<AsyncSegmentationManager>();

            // –î–æ–±–∞–≤–ª—è–µ–º PaintManager
            var paintManager = coreManager.AddComponent<PaintManager>();

            // –î–æ–±–∞–≤–ª—è–µ–º CommandManager –¥–ª—è Undo/Redo
            var commandManager = coreManager.AddComponent<CommandManager>();

            // –î–æ–±–∞–≤–ª—è–µ–º MemoryPoolManager
            var memoryPoolManager = coreManager.AddComponent<MemoryPoolManager>();

            Debug.Log("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã");
      }

      void SetupUI()
      {
            Debug.Log("üé® –°–æ–∑–¥–∞–Ω–∏–µ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤...");

            // –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—ã–π Canvas
            var canvasGO = new GameObject("AR Painting UI");
            mainCanvas = canvasGO.AddComponent<Canvas>();
            mainCanvas.renderMode = RenderMode.ScreenSpaceOverlay;
            mainCanvas.sortingOrder = 100;

            canvasGO.AddComponent<CanvasScaler>();
            canvasGO.AddComponent<GraphicRaycaster>();

            // –î–æ–±–∞–≤–ª—è–µ–º UIManager
            uiManager = canvasGO.AddComponent<UIManager>();

            // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ UI —ç–ª–µ–º–µ–Ω—Ç—ã
            CreateColorPalette();
            CreateControlButtons();
            CreatePerformanceDisplay();
            CreateBlendModeDropdown();

            Debug.Log("‚úÖ UI —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã");
      }

      void CreateColorPalette()
      {
            // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å –ø–∞–ª–∏—Ç—Ä—ã
            var palettePanel = CreateUIPanel("Color Palette", mainCanvas.transform);
            var paletteRect = palettePanel.GetComponent<RectTransform>();
            paletteRect.anchorMin = new Vector2(0.02f, 0.7f);
            paletteRect.anchorMax = new Vector2(0.25f, 0.98f);
            paletteRect.offsetMin = Vector2.zero;
            paletteRect.offsetMax = Vector2.zero;

            // –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É –¥–ª—è —Ü–≤–µ—Ç–æ–≤
            var gridLayout = palettePanel.AddComponent<GridLayoutGroup>();
            gridLayout.cellSize = new Vector2(60, 60);
            gridLayout.spacing = new Vector2(10, 10);
            gridLayout.padding = new RectOffset(10, 10, 10, 10);

            // –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞
            Color[] colors = {
            Color.red, Color.green, Color.blue, Color.yellow,
            Color.cyan, Color.magenta, Color.white, new Color(0.8f, 0.4f, 0.2f),
            new Color(0.5f, 0.3f, 0.8f), new Color(0.2f, 0.8f, 0.4f)
        };

            foreach (var color in colors)
            {
                  CreateColorButton(color, palettePanel.transform);
            }
      }

      void CreateControlButtons()
      {
            // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            var controlPanel = CreateUIPanel("Control Panel", mainCanvas.transform);
            var controlRect = controlPanel.GetComponent<RectTransform>();
            controlRect.anchorMin = new Vector2(0.02f, 0.02f);
            controlRect.anchorMax = new Vector2(0.5f, 0.15f);
            controlRect.offsetMin = Vector2.zero;
            controlRect.offsetMax = Vector2.zero;

            var layout = controlPanel.AddComponent<HorizontalLayoutGroup>();
            layout.spacing = 15;
            layout.padding = new RectOffset(15, 15, 15, 15);
            layout.childControlWidth = true;
            layout.childControlHeight = true;

            // –ö–Ω–æ–ø–∫–∞ Clear
            var clearButton = CreateButton("Clear", controlPanel.transform);
            if (clearButton != null)
            {
                  clearButton.onClick.AddListener(uiManager.OnClearAllClicked);
            }

            // –ö–Ω–æ–ø–∫–∞ Undo
            var undoButton = CreateButton("Undo", controlPanel.transform);
            if (undoButton != null)
            {
                  undoButton.onClick.AddListener(uiManager.OnUndoClicked);
            }

            // –ö–Ω–æ–ø–∫–∞ Redo
            var redoButton = CreateButton("Redo", controlPanel.transform);
            if (redoButton != null)
            {
                  redoButton.onClick.AddListener(uiManager.OnRedoClicked);
            }

            // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Å—Å—ã–ª–∫–∏ –≤ UIManager
            if (uiManager != null)
            {
                  var uiManagerType = typeof(UIManager);
                  var clearField = uiManagerType.GetField("clearButton", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
                  var undoField = uiManagerType.GetField("undoButton", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
                  var redoField = uiManagerType.GetField("redoButton", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);

                  clearField?.SetValue(uiManager, clearButton);
                  undoField?.SetValue(uiManager, undoButton);
                  redoField?.SetValue(uiManager, redoButton);
            }
      }

      void CreateBlendModeDropdown()
      {
            // –°–æ–∑–¥–∞–µ–º Dropdown –¥–ª—è —Ä–µ–∂–∏–º–æ–≤ —Å–º–µ—à–∏–≤–∞–Ω–∏—è
            var dropdownGO = new GameObject("Blend Mode Dropdown");
            dropdownGO.transform.SetParent(mainCanvas.transform);

            var dropdownRect = dropdownGO.AddComponent<RectTransform>();
            dropdownRect.anchorMin = new Vector2(0.7f, 0.85f);
            dropdownRect.anchorMax = new Vector2(0.98f, 0.95f);
            dropdownRect.offsetMin = Vector2.zero;
            dropdownRect.offsetMax = Vector2.zero;

            var dropdown = dropdownGO.AddComponent<TMP_Dropdown>();

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏
            dropdown.options.Clear();
            dropdown.options.Add(new TMP_Dropdown.OptionData("Normal"));
            dropdown.options.Add(new TMP_Dropdown.OptionData("Multiply"));
            dropdown.options.Add(new TMP_Dropdown.OptionData("Overlay"));
            dropdown.options.Add(new TMP_Dropdown.OptionData("Soft Light"));

            // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –≤ UIManager
            if (uiManager != null)
            {
                  var uiManagerType = typeof(UIManager);
                  var dropdownField = uiManagerType.GetField("blendModeDropdown", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
                  dropdownField?.SetValue(uiManager, dropdown);
            }
      }

      void CreatePerformanceDisplay()
      {
            // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            var perfPanel = CreateUIPanel("Performance Panel", mainCanvas.transform);
            var perfRect = perfPanel.GetComponent<RectTransform>();
            perfRect.anchorMin = new Vector2(0.7f, 0.7f);
            perfRect.anchorMax = new Vector2(0.98f, 0.82f);
            perfRect.offsetMin = Vector2.zero;
            perfRect.offsetMax = Vector2.zero;

            var layout = perfPanel.AddComponent<VerticalLayoutGroup>();
            layout.spacing = 5;
            layout.padding = new RectOffset(10, 10, 5, 5);

            // FPS —Ç–µ–∫—Å—Ç
            var fpsText = CreateText("FPS: --", perfPanel.transform);
            fpsText.color = Color.green;
            fpsText.fontSize = 16;

            // ML –≤—Ä–µ–º—è
            var mlText = CreateText("ML: --ms", perfPanel.transform);
            mlText.color = Color.yellow;
            mlText.fontSize = 16;

            // –ü–∞–º—è—Ç—å
            var memText = CreateText("RAM: --MB", perfPanel.transform);
            memText.color = Color.cyan;
            memText.fontSize = 16;
      }

      void SetupPerformanceMonitoring()
      {
            Debug.Log("üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...");

            var perfGO = new GameObject("Performance Monitor");
            performanceMonitor = perfGO.AddComponent<PerformanceMonitor>();

            // –ù–∞–π–¥–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ UI —ç–ª–µ–º–µ–Ω—Ç—ã –∏ —Å–≤—è–∂–µ–º —Å PerformanceMonitor
            var fpsText = GameObject.Find("FPS Text")?.GetComponent<TextMeshProUGUI>();
            var mlText = GameObject.Find("ML Text")?.GetComponent<TextMeshProUGUI>();
            var memText = GameObject.Find("Memory Text")?.GetComponent<TextMeshProUGUI>();

            if (performanceMonitor != null && fpsText != null)
            {
                  var perfType = typeof(PerformanceMonitor);
                  var fpsField = perfType.GetField("fpsText", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
                  var mlField = perfType.GetField("inferenceTimeText", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
                  var memField = perfType.GetField("memoryText", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);

                  fpsField?.SetValue(performanceMonitor, fpsText);
                  mlField?.SetValue(performanceMonitor, mlText);
                  memField?.SetValue(performanceMonitor, memText);
            }

            Debug.Log("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
      }

      void LinkComponents()
      {
            Debug.Log("üîó –°–≤—è–∑—ã–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...");

            // –°–≤—è–∑—ã–≤–∞–µ–º AsyncSegmentationManager —Å –¥—Ä—É–≥–∏–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
            if (segmentationManager != null)
            {
                  var arCameraManager = arCamera?.GetComponent<ARCameraManager>();
                  var paintManager = FindObjectOfType<PaintManager>();

                  if (arCameraManager != null)
                  {
                        var segType = typeof(AsyncSegmentationManager);
                        var cameraField = segType.GetField("arCameraManager", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
                        cameraField?.SetValue(segmentationManager, arCameraManager);

                        var paintField = segType.GetField("paintManager", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
                        paintField?.SetValue(segmentationManager, paintManager);
                  }
            }

            // –°–≤—è–∑—ã–≤–∞–µ–º UIManager —Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏
            if (uiManager != null)
            {
                  var paintManager = FindObjectOfType<PaintManager>();
                  var commandManager = FindObjectOfType<CommandManager>();

                  var uiType = typeof(UIManager);
                  var paintField = uiType.GetField("paintManager", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance);
                  var segField = uiType.GetField("segmentationManager", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance);
                  var cmdField = uiType.GetField("commandManager", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance);

                  paintField?.SetValue(uiManager, paintManager);
                  segField?.SetValue(uiManager, segmentationManager);
                  cmdField?.SetValue(uiManager, commandManager);
            }

            // –°–≤—è–∑—ã–≤–∞–µ–º PerformanceMonitor —Å AsyncSegmentationManager
            if (performanceMonitor != null && segmentationManager != null)
            {
                  var perfType = typeof(PerformanceMonitor);
                  var segField = perfType.GetField("segmentationManager", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
                  segField?.SetValue(performanceMonitor, segmentationManager);
            }

            Debug.Log("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–≤—è–∑–∞–Ω—ã");
      }

      // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è UI
      GameObject CreateUIPanel(string name, Transform parent)
      {
            var panelGO = new GameObject(name);
            panelGO.transform.SetParent(parent);

            var rect = panelGO.AddComponent<RectTransform>();
            var image = panelGO.AddComponent<Image>();
            image.color = new Color(0, 0, 0, 0.7f);

            return panelGO;
      }

      Button CreateButton(string text, Transform parent)
      {
            var buttonGO = new GameObject(text + " Button");
            buttonGO.transform.SetParent(parent);

            var rect = buttonGO.AddComponent<RectTransform>();
            var image = buttonGO.AddComponent<Image>();
            image.color = new Color(0.2f, 0.5f, 0.8f, 0.8f);

            var button = buttonGO.AddComponent<Button>();
            button.targetGraphic = image;

            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            var textGO = new GameObject("Text");
            textGO.transform.SetParent(buttonGO.transform);

            var textRect = textGO.AddComponent<RectTransform>();
            textRect.anchorMin = Vector2.zero;
            textRect.anchorMax = Vector2.one;
            textRect.offsetMin = Vector2.zero;
            textRect.offsetMax = Vector2.zero;

            var textComp = textGO.AddComponent<TextMeshProUGUI>();
            textComp.text = text;
            textComp.alignment = TextAlignmentOptions.Center;
            textComp.fontSize = 16;
            textComp.color = Color.white;

            return button;
      }

      void CreateColorButton(Color color, Transform parent)
      {
            var buttonGO = new GameObject("Color Button");
            buttonGO.transform.SetParent(parent);

            var rect = buttonGO.AddComponent<RectTransform>();
            var image = buttonGO.AddComponent<Image>();
            image.color = color;

            var button = buttonGO.AddComponent<Button>();
            button.targetGraphic = image;

            var colorButton = buttonGO.AddComponent<ColorButton>();

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º onClick –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ü–≤–µ—Ç–∞
            button.onClick.AddListener(() =>
            {
                  if (uiManager != null)
                  {
                        uiManager.OnColorButtonClicked(color);
                  }
            });
      }

      TextMeshProUGUI CreateText(string text, Transform parent)
      {
            var textGO = new GameObject(text.Split(':')[0] + " Text");
            textGO.transform.SetParent(parent);

            var rect = textGO.AddComponent<RectTransform>();
            var textComp = textGO.AddComponent<TextMeshProUGUI>();
            textComp.text = text;
            textComp.fontSize = 14;
            textComp.color = Color.white;

            return textComp;
      }

      [ContextMenu("Test Performance")]
      public void TestPerformance()
      {
            if (performanceMonitor != null)
            {
                  var report = performanceMonitor.GetPerformanceReport();
                  Debug.Log($"üìä Performance Report: {report}");
            }

            if (MemoryPoolManager.Instance != null)
            {
                  var memStats = MemoryPoolManager.Instance.GetMemoryStats();
                  Debug.Log($"üß† Memory Stats: {memStats}");
            }
      }

      [ContextMenu("Reset Scene")]
      public void ResetScene()
      {
            Debug.Log("üîÑ –°–±—Ä–æ—Å AR Painting —Å—Ü–µ–Ω—ã...");

            // –£–¥–∞–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
            var objectsToDelete = new string[] {
            "AR Session", "AR Session Origin", "AR Painting Core",
            "AR Painting UI", "Performance Monitor"
        };

            foreach (var objName in objectsToDelete)
            {
                  var obj = GameObject.Find(objName);
                  if (obj != null)
                  {
                        DestroyImmediate(obj);
                  }
            }

            Debug.Log("‚úÖ –°—Ü–µ–Ω–∞ —Å–±—Ä–æ—à–µ–Ω–∞");
      }
}