using UnityEngine;
using UnityEngine.XR.ARFoundation;
using UnityEngine.XR.ARSubsystems;

/// <summary>
/// –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø—Ä–æ–µ–∫—Ü–∏—é –º–∞—Å–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –≤ 3D-–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –æ –≥–ª—É–±–∏–Ω–µ.
/// –ü—Ä–∏–º–µ–Ω—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫ AR-–∫–∞–º–µ—Ä–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Å–∫–∏ –≤ –º–∏—Ä–æ–≤—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö.
/// </summary>
[RequireComponent(typeof(Camera))]
public class ProjectionRenderer : MonoBehaviour
{
      [Header("–°—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")]
      [Tooltip("AR Occlusion Manager –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≥–ª—É–±–∏–Ω–µ")]
      [SerializeField]
      private AROcclusionManager occlusionManager;

      [Tooltip("Async Segmentation Manager –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Å–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏")]
      [SerializeField]
      private AsyncSegmentationManager segmentationManager;

      [Header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ª–∞–¥–∫–∏")]
      [Tooltip("–í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ–Ω—Å–æ–ª—å")]
      [SerializeField]
      private bool enableDebugLogging = true;

      [Tooltip("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")]
      [SerializeField]
      private bool showPerformanceStats = false;

      [Header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞")]
      [Tooltip("–í–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥")]
      [SerializeField]
      private bool enableProjection = true;

      [Tooltip("–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - –ø–æ–∫–∞–∑–∞—Ç—å –º–∞—Å–∫—É –Ω–∞–ø—Ä—è–º—É—é")]
      [SerializeField]
      private bool testMode = false;

      [Tooltip("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Ç—è–Ω—É—Ç—å –º–∞—Å–∫—É –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω")]
      [SerializeField]
      private bool forceFullscreen = true;

      // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
      private Camera arCamera;
      private Material projectionMaterial;
      private Shader projectionShader;

      // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—É—Ä—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      private Texture2D environmentDepthTexture;
      private RenderTexture segmentationTexture;

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      private float lastFrameTime;
      private int frameCount;

      private void Awake()
      {
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞–º–µ—Ä—ã
            arCamera = GetComponent<Camera>();
            if (arCamera == null)
            {
                  LogError("ProjectionRenderer –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ –æ–±—ä–µ–∫—Ç—É —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º Camera");
                  enabled = false;
                  return;
            }

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã
            if (occlusionManager == null)
            {
                  occlusionManager = FindObjectOfType<AROcclusionManager>();
                  if (occlusionManager == null)
                  {
                        LogError("–ù–µ –Ω–∞–π–¥–µ–Ω AROcclusionManager –≤ —Å—Ü–µ–Ω–µ. –ü—Ä–æ–µ–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞.");
                        enableProjection = false;
                  }
            }

            if (segmentationManager == null)
            {
                  segmentationManager = FindObjectOfType<AsyncSegmentationManager>();
                  if (segmentationManager == null)
                  {
                        LogError("–ù–µ –Ω–∞–π–¥–µ–Ω AsyncSegmentationManager –≤ —Å—Ü–µ–Ω–µ. –ü—Ä–æ–µ–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞.");
                        enableProjection = false;
                  }
            }

            LogDebug("‚úÖ ProjectionRenderer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
      }

      private void Start()
      {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —à–µ–π–¥–µ—Ä –ø—Ä–æ–µ–∫—Ü–∏–∏
            LoadProjectionShader();

            // –°–æ–∑–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
            CreateProjectionMaterial();

            LogDebug("üéØ ProjectionRenderer –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ");
      }

      private void Update()
      {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if (showPerformanceStats)
            {
                  UpdatePerformanceStats();
            }

            // –û—Ç–ª–∞–¥–∫–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É
            // if (enableDebugLogging && Time.time % 2.0f < 0.1f)
            // {
            //       bool segReady = segmentationManager != null && segmentationManager.IsSegmentationMaskReady();
            //       LogDebug($"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö: —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ = {segReady}");
            //       LogDebug($"üîÑ –ö–∞–º–µ—Ä–∞: {arCamera != null}, –ú–∞—Ç–µ—Ä–∏–∞–ª: {projectionMaterial != null}, –ü—Ä–æ–µ–∫—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞: {enableProjection}");
            // }
            // –û–¢–ö–õ–Æ–ß–ï–ù–û: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–ø–∞–º–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏

            // –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Å–∫—É –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (–æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ OnRenderObject)
            // –û—Ç–∫–ª—é—á–∞–µ–º ShowTestMask, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å OnRenderObject
            // if (testMode && segmentationManager != null && segmentationManager.IsSegmentationMaskReady())
            // {
            //     ShowTestMask();
            // }

            // FALLBACK: –ï—Å–ª–∏ OnRenderImage –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥
            if (enableProjection && !testMode && projectionMaterial != null && segmentationManager != null && segmentationManager.IsSegmentationMaskReady())
            {
                  // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —á–µ—Ä–µ–∑ CommandBuffer (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ OnRenderImage)
                  TryAlternativeRendering();
            }
      }

      /// <summary>
      /// –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ - –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è Unity –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–¥—Ä–∞
      /// </summary>
      /// <param name="source">–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–∞–º–µ—Ä—ã</param>
      /// <param name="destination">–¶–µ–ª–µ–≤–æ–π render target</param>
      private void OnRenderImage(RenderTexture source, RenderTexture destination)
      {
            LogDebug("üì∑ OnRenderImage –≤—ã–∑–≤–∞–Ω");

            // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –º–∞—Å–∫—É
            if (testMode && projectionMaterial != null && segmentationManager != null)
            {
                  var mask = segmentationManager.GetCurrentSegmentationMask();
                  if (mask != null)
                  {
                        LogDebug($"üé® OnRenderImage: —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º, –º–∞—Å–∫–∞ {mask.width}x{mask.height}");

                        projectionMaterial.SetTexture("_SegmentationTex", mask);
                        projectionMaterial.SetInt("_DebugMode", 3); // –ø–æ–∫–∞–∑–∞—Ç—å —á–∏—Å—Ç—É—é –º–∞—Å–∫—É
                        projectionMaterial.SetFloat("_MaskOpacity", 1.0f);

                        Graphics.Blit(source, destination, projectionMaterial);
                        LogDebug("üé® OnRenderImage: —Ç–µ—Å—Ç–æ–≤–∞—è –º–∞—Å–∫–∞ –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω–∞");
                        return;
                  }
            }

            // –ï—Å–ª–∏ –ø—Ä–æ–µ–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞, –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if (!enableProjection || projectionMaterial == null)
            {
                  LogDebug("‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∏–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
                  Graphics.Blit(source, destination);
                  return;
            }

            // –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–µ–∫—Å—Ç—É—Ä—ã
            bool hasValidData = UpdateShaderParameters(source);

            LogDebug($"üìä –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã: {hasValidData}");

            if (hasValidData)
            {
                  // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–µ–∫—Ü–∏–æ–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
                  Graphics.Blit(source, destination, projectionMaterial);
                  LogDebug("üé® –ü—Ä–æ–µ–∫—Ü–∏–æ–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω");
            }
            else
            {
                  // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                  Graphics.Blit(source, destination);
                  LogDebug("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–µ–∫—Ü–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ");
            }
      }

      /// <summary>
      /// –ó–∞–≥—Ä—É–∑–∫–∞ —à–µ–π–¥–µ—Ä–∞ –ø—Ä–æ–µ–∫—Ü–∏–∏
      /// </summary>
      private void LoadProjectionShader()
      {
            projectionShader = Shader.Find("Custom/ProjectiveMask");
            if (projectionShader == null)
            {
                  LogError("–ù–µ –Ω–∞–π–¥–µ–Ω —à–µ–π–¥–µ—Ä 'Custom/ProjectiveMask'. –°–æ–∑–¥–∞–π—Ç–µ —à–µ–π–¥–µ—Ä ProjectiveMask.shader");
                  enableProjection = false;
            }
            else
            {
                  LogDebug("‚úÖ –®–µ–π–¥–µ—Ä –ø—Ä–æ–µ–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω: " + projectionShader.name);
            }
      }

      /// <summary>
      /// –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ü–∏–∏
      /// </summary>
      private void CreateProjectionMaterial()
      {
            if (projectionShader != null)
            {
                  projectionMaterial = new Material(projectionShader);
                  LogDebug("‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª –ø—Ä–æ–µ–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω");
            }
      }

      /// <summary>
      /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —à–µ–π–¥–µ—Ä–∞ –ø–µ—Ä–µ–¥ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–æ–º
      /// </summary>
      /// <param name="cameraTexture">–¢–µ–∫—Å—Ç—É—Ä–∞ —Å –∫–∞–º–µ—Ä—ã</param>
      /// <returns>true, –µ—Å–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã</returns>
      private bool UpdateShaderParameters(RenderTexture cameraTexture)
      {
            if (projectionMaterial == null)
                  return false;

            bool hasDepthTexture = false;
            bool hasSegmentationTexture = false;

            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –≥–ª—É–±–∏–Ω—ã –∏–∑ AROcclusionManager
            if (occlusionManager != null && occlusionManager.environmentDepthTexture != null)
            {
                  environmentDepthTexture = occlusionManager.environmentDepthTexture;
                  projectionMaterial.SetTexture("_EnvironmentDepthTex", environmentDepthTexture);
                  hasDepthTexture = true;
                  LogDebug("üìä –ì–ª—É–±–∏–Ω–∞ –ø–æ–ª—É—á–µ–Ω–∞: " + environmentDepthTexture.width + "x" + environmentDepthTexture.height);
            }

            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏–∑ AsyncSegmentationManager
            if (segmentationManager != null && segmentationManager.IsSegmentationMaskReady())
            {
                  segmentationTexture = segmentationManager.GetCurrentSegmentationMask();
                  if (segmentationTexture != null)
                  {
                        projectionMaterial.SetTexture("_SegmentationTex", segmentationTexture);
                        hasSegmentationTexture = true;
                        LogDebug($"üé≠ –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞: {segmentationTexture.width}x{segmentationTexture.height}");
                  }
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞—Ç—Ä–∏—Ü—ã –∫–∞–º–µ—Ä—ã
            if (arCamera != null)
            {
                  Matrix4x4 projectionMatrix = arCamera.projectionMatrix;
                  Matrix4x4 inverseProjectionMatrix = projectionMatrix.inverse;

                  projectionMaterial.SetMatrix("_ProjectionMatrix", projectionMatrix);
                  projectionMaterial.SetMatrix("_InverseProjectionMatrix", inverseProjectionMatrix);

                  LogDebug("üìê –ú–∞—Ç—Ä–∏—Ü—ã –∫–∞–º–µ—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã");
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –º–∞—Å–∫–∏ (–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ segmentationManager)
            float maskOpacity = 0.5f; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å–º–µ—à–∏–≤–∞–Ω–∏—è —Å –∫–∞–º–µ—Ä–æ–π
            projectionMaterial.SetFloat("_MaskOpacity", maskOpacity);

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º debug mode –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Å–º–µ—à–∏–≤–∞–Ω–∏—è (–Ω–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞)
            projectionMaterial.SetInt("_DebugMode", 0); // 0 = –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º, —Å–º–µ—à–∏–≤–∞–Ω–∏–µ —Å –∫–∞–º–µ—Ä–æ–π

            // –ü–µ—Ä–µ–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–∞—Ö —ç–∫—Ä–∞–Ω–∞ –∏ –º–∞—Å–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –∞—Å–ø–µ–∫—Ç–∞
            if (segmentationTexture != null && cameraTexture != null)
            {
                  float screenAspect = (float)cameraTexture.width / cameraTexture.height;
                  float maskAspect = (float)segmentationTexture.width / segmentationTexture.height;

                  // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏–º –ø–æ–≤–æ—Ä–æ—Ç–∞ –∏–∑ AsyncSegmentationManager
                  int rotationMode = 0; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é +90¬∞
                  if (segmentationManager != null)
                  {
                        rotationMode = segmentationManager.GetMaskRotationMode();
                  }

                  // –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–≤–æ—Ä–æ—Ç –º–∞—Å–∫–∏ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –∞—Å–ø–µ–∫—Ç–∞
                  if (rotationMode == 0 || rotationMode == 1) // +90¬∞ –∏–ª–∏ -90¬∞
                  {
                        maskAspect = 1.0f / maskAspect; // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∞—Å–ø–µ–∫—Ç
                  }

                  float aspectRatio = screenAspect / maskAspect;

                  projectionMaterial.SetFloat("_ScreenAspect", screenAspect);
                  projectionMaterial.SetFloat("_MaskAspect", maskAspect);
                  projectionMaterial.SetFloat("_AspectRatio", aspectRatio);
                  projectionMaterial.SetInt("_ForceFullscreen", forceFullscreen ? 1 : 0);

                  LogDebug($"üñ•Ô∏è –ê—Å–ø–µ–∫—Ç—ã: —ç–∫—Ä–∞–Ω={screenAspect:F2}, –º–∞—Å–∫–∞={maskAspect:F2} (rotation mode: {rotationMode}), –∫–æ—Ä—Ä–µ–∫—Ü–∏—è={aspectRatio:F2}");
            }

            // –í —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ –≥–ª—É–±–∏–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ—ç—Ç–æ–º—É —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–µ–π
            // –ù–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≥–ª—É–±–∏–Ω—É, –∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é
            bool isReady = hasSegmentationTexture && (hasDepthTexture || Application.isEditor);

            if (enableDebugLogging && Time.time % 3.0f < 0.1f)
            {
                  LogDebug($"üìä –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã: —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è={hasSegmentationTexture}, –≥–ª—É–±–∏–Ω–∞={hasDepthTexture}, —Ä–µ–¥–∞–∫—Ç–æ—Ä={Application.isEditor}");
            }

            return isReady;
      }

      /// <summary>
      /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      /// </summary>
      private void UpdatePerformanceStats()
      {
            frameCount++;
            float currentTime = Time.realtimeSinceStartup;

            if (currentTime - lastFrameTime >= 1.0f)
            {
                  float fps = frameCount / (currentTime - lastFrameTime);
                  LogDebug($"üìä FPS: {fps:F1}");

                  frameCount = 0;
                  lastFrameTime = currentTime;
            }
      }

      /// <summary>
      /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
      /// </summary>
      private void LogDebug(string message)
      {
            if (enableDebugLogging)
            {
                  Debug.Log($"[ProjectionRenderer] {message}");
            }
      }

      /// <summary>
      /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
      /// </summary>
      private void LogError(string message)
      {
            Debug.LogError($"[ProjectionRenderer] ‚ùå {message}");
      }

      /// <summary>
      /// –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
      /// </summary>
      private void OnDestroy()
      {
            if (projectionMaterial != null)
            {
                  DestroyImmediate(projectionMaterial);
            }
      }

      /// <summary>
      /// –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - –ø–æ–∫–∞–∑–∞—Ç—å –º–∞—Å–∫—É —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é
      /// </summary>
      private void ShowTestMask()
      {
            RenderTexture mask = segmentationManager.GetCurrentSegmentationMask();
            if (mask != null)
            {
                  // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π RenderTexture –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                  RenderTexture testRT = RenderTexture.GetTemporary(Screen.width, Screen.height, 0, RenderTextureFormat.ARGB32);

                  // –û—á–∏—â–∞–µ–º –≤ —á–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç
                  RenderTexture.active = testRT;
                  GL.Clear(true, true, Color.black);

                  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–∞—Å–∫—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–∞—à–µ–≥–æ —à–µ–π–¥–µ—Ä–∞
                  if (projectionMaterial != null)
                  {
                        projectionMaterial.SetTexture("_SegmentationTex", mask);
                        projectionMaterial.SetFloat("_MaskOpacity", 1.0f);
                        projectionMaterial.SetInt("_DebugMode", 3); // –ü–æ–∫–∞–∑–∞—Ç—å —á–∏—Å—Ç—É—é –º–∞—Å–∫—É

                        Graphics.Blit(null, testRT, projectionMaterial);
                  }

                  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ
                  Graphics.Blit(testRT, (RenderTexture)null);

                  RenderTexture.ReleaseTemporary(testRT);
                  RenderTexture.active = null;

                  LogDebug("üß™ –¢–µ—Å—Ç–æ–≤–∞—è –º–∞—Å–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞");
            }
      }

      /// <summary>
      /// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ CommandBuffer
      /// </summary>
      private void TryAlternativeRendering()
      {
            if (arCamera == null || projectionMaterial == null) return;

            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π RenderTexture –∫–∞–º–µ—Ä—ã
            RenderTexture cameraTexture = arCamera.targetTexture;
            if (cameraTexture == null)
            {
                  LogDebug("‚ö†Ô∏è AR –∫–∞–º–µ—Ä–∞ –Ω–µ –∏–º–µ–µ—Ç targetTexture");
                  return;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —à–µ–π–¥–µ—Ä–∞
            bool hasValidData = UpdateShaderParameters(cameraTexture);

            if (hasValidData)
            {
                  // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π RenderTexture –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                  RenderTexture tempRT = RenderTexture.GetTemporary(cameraTexture.width, cameraTexture.height, 0, cameraTexture.format);

                  // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç
                  Graphics.Blit(cameraTexture, tempRT, projectionMaterial);
                  Graphics.Blit(tempRT, cameraTexture);

                  RenderTexture.ReleaseTemporary(tempRT);
                  LogDebug("üé® –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω");
            }
      }

      /// <summary>
      /// –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ü–∏—é –≤ runtime
      /// </summary>
      public void ToggleProjection()
      {
            enableProjection = !enableProjection;
            LogDebug($"üîÑ –ü—Ä–æ–µ–∫—Ü–∏—è {(enableProjection ? "–≤–∫–ª—é—á–µ–Ω–∞" : "–æ—Ç–∫–ª—é—á–µ–Ω–∞")}");
      }

      /// <summary>
      /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ü–∏–∏
      /// </summary>
      public bool IsProjectionEnabled()
      {
            return enableProjection && projectionMaterial != null;
      }

      // –†–µ–Ω–¥–µ—Ä –ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏ URP (–û–¢–ö–õ–Æ–ß–ï–ù–û - –∏—Å–ø–æ–ª—å–∑—É–µ–º OnRenderImage)
      private void OnRenderObject()
      {
            // –û—Ç–∫–ª—é—á–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º OnRenderImage –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            return;

            // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞
            /*
            if (!testMode || projectionMaterial == null || segmentationManager == null)
            {
                  return;
            }

            var mask = segmentationManager.GetCurrentSegmentationMask();
            if (mask == null)
            {
                  LogDebug("üß™ OnRenderObject: mask == null");
                  return;
            }
            
            LogDebug($"üß™ OnRenderObject: –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –º–∞—Å–∫–∏ {mask.width}x{mask.height}");

            // –û—Ç–∫–ª—é—á–∞–µ–º –≥–ª—É–±–∏–Ω—É –∏ –±–ª–µ–Ω–¥–∏–Ω–≥ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ
            GL.PushMatrix();
            GL.LoadOrtho();

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–Ω–¥–µ—Ä–∞ –¥–ª—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è –ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ
            GL.Clear(false, true, Color.clear); // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–≤–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≥–ª—É–±–∏–Ω—É

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Ç–µ—Ä–∏–∞–ª–∞
            projectionMaterial.SetTexture("_SegmentationTex", mask);
            projectionMaterial.SetInt("_DebugMode", 3); // –ø–æ–∫–∞–∑–∞—Ç—å —á–∏—Å—Ç—É—é –º–∞—Å–∫—É
            projectionMaterial.SetFloat("_MaskOpacity", 1.0f);

            // –†–∏—Å—É–µ–º –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π –∫–≤–∞–¥ —Å —è–≤–Ω—ã–º–∏ UV –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
            projectionMaterial.SetPass(0);
            GL.Begin(GL.QUADS);
            // UV –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å—ç–º–ø–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç—É—Ä—ã (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫)
            GL.TexCoord2(0f, 0f); GL.Vertex3(0f, 0f, 0.1f); // –ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π
            GL.TexCoord2(1f, 0f); GL.Vertex3(1f, 0f, 0.1f); // –ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π
            GL.TexCoord2(1f, 1f); GL.Vertex3(1f, 1f, 0.1f); // –ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π  
            GL.TexCoord2(0f, 1f); GL.Vertex3(0f, 1f, 0.1f); // –ª–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π
            GL.End();
            GL.PopMatrix();

            LogDebug("üß™ OnRenderObject: —Ç–µ—Å—Ç–æ–≤–∞—è –º–∞—Å–∫–∞ –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω–∞ –ø–æ–≤–µ—Ä—Ö –∫–∞–¥—Ä–∞");
            */
      }


}
