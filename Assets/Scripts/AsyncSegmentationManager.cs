using System;
using System.Threading;
using System.Threading.Tasks;
using Unity.Sentis;
using UnityEngine;
using UnityEngine.Rendering;
using UnityEngine.UI;
using UnityEngine.XR.ARFoundation;
using UnityEngine.XR.ARSubsystems;

public class AsyncSegmentationManager : MonoBehaviour
{
    [Header("Dependencies")]
    [SerializeField]
    private ARCameraManager arCameraManager;
    [SerializeField]
    private RawImage segmentationDisplay;
    [SerializeField]
    private ModelAsset modelAsset;
    [SerializeField]
    private ComputeShader argmaxShader;
    [SerializeField]
    private Material visualizationMaterial; // –ú–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∞—Å–∫–∏

    private Model runtimeModel;
    private Worker worker;

    [Header("Processing & Visualization")]
    [SerializeField]
    private Vector2Int processingResolution = new Vector2Int(512, 512);
    
    // Fields for PerformanceControlUI compatibility
    [Tooltip("The number of frames to skip between processing.")]
    public int frameSkipRate = 1; 
    [Tooltip("This property is obsolete but kept for UI compatibility.")]
    public float minFrameInterval { get; set; }
    [Tooltip("This property is obsolete but kept for UI compatibility.")]
    public bool UseCpuArgmax { get; set; }

    // GPU Textures & Buffers
    private RenderTexture cameraInputTexture;
    private RenderTexture segmentationMaskTexture; // RFloat texture with class indices
    private Material displayMaterialInstance;

    // Sentis Tensors
    private Tensor<float> inputTensor;

    private CancellationTokenSource cancellationTokenSource;
    private bool isProcessing = false;
    private int frameCount = 0;
    
    // –î–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∞–ª–ª–æ–∫–∞—Ü–∏–π
    private XRCpuImage.ConversionParams conversionParams;

    private const int NUM_CLASSES = 16; 

    void OnEnable()
    {
        cancellationTokenSource = new CancellationTokenSource();
        InitializeSystem();
    }

    void OnDisable()
    {
        cancellationTokenSource?.Cancel();
        cancellationTokenSource?.Dispose();
        
        worker?.Dispose();
        inputTensor?.Dispose();

        ReleaseRenderTexture(cameraInputTexture);
        ReleaseRenderTexture(segmentationMaskTexture);
    }

    void Update()
    {
        if (ARSession.state < ARSessionState.SessionTracking || worker == null || isProcessing)
        {
            return;
        }

        if (frameCount % (frameSkipRate + 1) == 0)
        {
            if (arCameraManager.TryAcquireLatestCpuImage(out XRCpuImage cpuImage))
            {
                Debug.Log($"üé• –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–¥—Ä #{frameCount}");
                ProcessFrameAsync(cpuImage);
            }
            else
            {
                Debug.LogWarning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–∞–º–µ—Ä—ã");
            }
        }
        frameCount++;
    }

    private void InitializeSystem()
    {
        arCameraManager = FindObjectOfType<ARCameraManager>();
        if (segmentationDisplay == null)
        {
            // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ RawImage, –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏—Å–≤–æ–µ–Ω –≤ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–µ
            var canvas = FindObjectOfType<Canvas>();
            if (canvas != null)
            {
                segmentationDisplay = canvas.GetComponentInChildren<RawImage>();
                if (segmentationDisplay != null)
                {
                    Debug.Log("‚úÖ RawImage –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.");
                }
            }
        }


        Debug.Log("üöÄ AsyncSegmentationManager: –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...");
        
        if (modelAsset == null)
        {
            Debug.LogError("‚ùå Model Asset –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –≤ AsyncSegmentationManager!");
            return;
        }
        
        if (argmaxShader == null)
        {
            Debug.LogError("‚ùå Argmax Shader –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –≤ AsyncSegmentationManager!");
            return;
        }
        
        if (segmentationDisplay == null)
        {
            Debug.LogError("‚ùå Segmentation Display –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –≤ AsyncSegmentationManager!");
            return;
        }

        try
        {
            runtimeModel = ModelLoader.Load(modelAsset);
            Debug.Log($"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {modelAsset.name}");
            
            // --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ---
            // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤—Ö–æ–¥–∞ –º–æ–¥–µ–ª–∏. 
            // –≠—Ç–æ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫—É "width & height must be larger than 0".
            try
            {
                var inputShape = runtimeModel.inputs[0].shape.ToTensorShape();
                // –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç NCHW (Batch, Channels, Height, Width)
                int height = inputShape[2];
                int width = inputShape[3];
                processingResolution = new Vector2Int(width, height);
                Debug.Log($"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤—Ö–æ–¥–∞ –º–æ–¥–µ–ª–∏: {processingResolution.x}x{processingResolution.y}");
            }
            catch (Exception e)
            {
                Debug.LogError($"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞: {processingResolution}. –û—à–∏–±–∫–∞: {e.Message}");
                if (processingResolution.x <= 0 || processingResolution.y <= 0)
                {
                    Debug.LogError("üö® 'processingResolution' –≤ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ 0! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 512x512) –∏–ª–∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–æ–¥–µ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞.");
                    return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
                }
            }
            
            worker = new Worker(runtimeModel, BackendType.GPUCompute);
            Debug.Log("‚úÖ Worker —Å–æ–∑–¥–∞–Ω —Å GPUCompute backend");

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç—É—Ä
            cameraInputTexture = CreateRenderTexture(processingResolution.x, processingResolution.y, RenderTextureFormat.ARGB32);
            // segmentationMaskTexture –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–æ —Ä–∞–∑–º–µ—Ä—É –≤—ã—Ö–æ–¥–∞ –º–æ–¥–µ–ª–∏

            if (segmentationDisplay!= null && visualizationMaterial!= null)
            {
                displayMaterialInstance = new Material(visualizationMaterial);
                segmentationDisplay.material = displayMaterialInstance;
                Debug.Log("‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω");

                // –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º RawImage –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
                var rectTransform = segmentationDisplay.rectTransform;
                rectTransform.anchorMin = Vector2.zero;
                rectTransform.anchorMax = Vector2.one;
                rectTransform.offsetMin = Vector2.zero;
                rectTransform.offsetMax = Vector2.zero;
                rectTransform.localScale = new Vector3(-1, -1, 1); // –û—Ç–∑–µ—Ä–∫–∞–ª–∏–≤–∞–µ–º –ø–æ X –∏ Y
                Debug.Log("‚úÖ SegmentationDisplay —Ä–∞—Å—Ç—è–Ω—É—Ç –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω –∏ –æ—Ç–∑–µ—Ä–∫–∞–ª–µ–Ω");
            }
            else
            {
                Debug.LogWarning("‚ö†Ô∏è Visualization Material –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω!");
            }
            
            Debug.Log("üéâ AsyncSegmentationManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
        }
        catch (System.Exception e)
        {
            Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AsyncSegmentationManager: {e.Message}\n{e.StackTrace}");
        }

        StartCoroutine(ForceMaterialUpdate());
    }

    private System.Collections.IEnumerator ForceMaterialUpdate()
    {
        while (true)
        {
            yield return new WaitForSeconds(1f);
            if (segmentationDisplay != null && segmentationDisplay.material.shader.name != "Unlit/VisualizeMask")
            {
                Debug.LogWarning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª! –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª.");
                var displayMaterial = new Material(visualizationMaterial);
                displayMaterial.SetTexture("_MaskTex", segmentationMaskTexture);
                segmentationDisplay.material = displayMaterial;
            }
        }
    }

    private async void ProcessFrameAsync(XRCpuImage cpuImage)
    {
        isProcessing = true;
        Debug.Log("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞–¥—Ä–∞...");

        try
        {
            var convertTask = ConvertCpuImageToTexture(cpuImage);
            await convertTask;
            if (cancellationTokenSource.IsCancellationRequested ||!convertTask.IsCompletedSuccessfully) return;

            // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Ç–µ–Ω–∑–æ—Ä
            inputTensor?.Dispose();
            inputTensor = TextureConverter.ToTensor(cameraInputTexture, processingResolution.x, processingResolution.y, 3);
            Debug.Log($"‚úÖ –¢–µ–Ω–∑–æ—Ä —Å–æ–∑–¥–∞–Ω: {inputTensor.shape}");
            
            worker.Schedule(inputTensor);
            Debug.Log("‚úÖ Inference –∑–∞–ø—É—â–µ–Ω");

            ProcessOutputWithArgmaxShader();
            Debug.Log("‚úÖ –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
        }
        catch (Exception e)
        {
            Debug.LogError($"‚ùå Frame processing failed: {e.Message}\n{e.StackTrace}");
        }
        finally
        {
            cpuImage.Dispose();
            isProcessing = false;
        }
    }
    
    private void ProcessOutputWithArgmaxShader()
    {
        var outputTensor = worker.PeekOutput() as Tensor<float>;
        if (outputTensor == null) 
        {
            Debug.LogError("‚ùå –í—ã—Ö–æ–¥–Ω–æ–π —Ç–µ–Ω–∑–æ—Ä —Ä–∞–≤–µ–Ω null!");
            return;
        }

        var shape = outputTensor.shape;
        int height = shape[2];
        int width = shape[3];
        int numClasses = shape[1];

        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –∏–ª–∏ –∏–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç—É—Ä—ã –¥–ª—è –º–∞—Å–∫–∏
        if (segmentationMaskTexture == null || segmentationMaskTexture.width != width || segmentationMaskTexture.height != height)
        {
            ReleaseRenderTexture(segmentationMaskTexture);
            segmentationMaskTexture = CreateRenderTexture(width, height, RenderTextureFormat.RFloat);
            
            if (displayMaterialInstance != null)
            {
                displayMaterialInstance.SetTexture("_MaskTex", segmentationMaskTexture);
                Debug.Log($"‚úÖ –¢–µ–∫—Å—Ç—É—Ä–∞ –º–∞—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–∞/–∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {width}x{height} –∏ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª—É");
            }
        }

        var tensorData = outputTensor.DownloadToArray();
        
        var cmd = new CommandBuffer { name = "SegmentationPostProcessing" };

        var tensorDataBuffer = new ComputeBuffer(tensorData.Length, sizeof(float));
        tensorDataBuffer.SetData(tensorData);

        int kernel = argmaxShader.FindKernel("Argmax");
        cmd.SetComputeIntParam(argmaxShader, "width", width);
        cmd.SetComputeIntParam(argmaxShader, "height", height);
        cmd.SetComputeIntParam(argmaxShader, "num_classes", numClasses);
        
        cmd.SetComputeBufferParam(argmaxShader, kernel, "InputTensor", tensorDataBuffer);
        cmd.SetComputeTextureParam(argmaxShader, kernel, "Result", segmentationMaskTexture);
        
        int threadGroupsX = Mathf.CeilToInt(width / 8.0f);
        int threadGroupsY = Mathf.CeilToInt(height / 8.0f);
        cmd.DispatchCompute(argmaxShader, kernel, threadGroupsX, threadGroupsY, 1);
        
        Graphics.ExecuteCommandBuffer(cmd);
        cmd.Dispose();
        
        tensorDataBuffer.Dispose();
        outputTensor.Dispose();
    }

    private async Task ConvertCpuImageToTexture(XRCpuImage cpuImage)
    {
        conversionParams = new XRCpuImage.ConversionParams
        {
            inputRect = new RectInt(0, 0, cpuImage.width, cpuImage.height),
            outputDimensions = new Vector2Int(processingResolution.x, processingResolution.y),
            outputFormat = TextureFormat.RGBA32,
            transformation = XRCpuImage.Transformation.MirrorY
        };

        var conversionRequest = cpuImage.ConvertAsync(conversionParams);

        while (!conversionRequest.status.IsDone())
        {
            if (cancellationTokenSource.IsCancellationRequested)
            {
                conversionRequest.Dispose();
                return;
            }
            await Task.Yield();
        }

        if (conversionRequest.status == XRCpuImage.AsyncConversionStatus.Ready)
        {
            var tempTexture = new Texture2D(
                conversionRequest.conversionParams.outputDimensions.x,
                conversionRequest.conversionParams.outputDimensions.y,
                conversionRequest.conversionParams.outputFormat,
                false);
    
            tempTexture.LoadRawTextureData(conversionRequest.GetData<byte>());
            tempTexture.Apply();

            Graphics.Blit(tempTexture, cameraInputTexture);
            
            Destroy(tempTexture);
        }
        else
        {
            Debug.LogError($"CPU Image conversion failed with status: {conversionRequest.status}");
        }
        conversionRequest.Dispose();
    }

    private RenderTexture CreateRenderTexture(int width, int height, RenderTextureFormat format)
    {
        var rt = new RenderTexture(width, height, 0, format)
        {
            enableRandomWrite = true
        };
        rt.Create();
        return rt;
    }

    private void ReleaseRenderTexture(RenderTexture rt)
    {
        if (rt!= null)
        {
            rt.Release();
            Destroy(rt);
        }
    }
}