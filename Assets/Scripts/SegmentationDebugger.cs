using UnityEngine;
using UnityEngine.UI;

/// <summary>
/// –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
/// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—Å—Ç—É—Ä–µ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤–∞—Ö
/// </summary>
public class SegmentationDebugger : MonoBehaviour
{
      [Header("UI References")]
      [SerializeField] private RawImage debugDisplay;
      [SerializeField] private Text debugText;

      [Header("Components")]
      [SerializeField] private SegmentationManager segmentationManager;
      [SerializeField] private AsyncSegmentationManager asyncSegmentationManager;

      private RenderTexture currentSegmentationTexture;

      void Update()
      {
            UpdateDebugInfo();
      }

      void UpdateDebugInfo()
      {
            string debugInfo = "=== SEGMENTATION DEBUG ===\n";

            // NEW: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±–æ–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏ –≤—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            bool oldManagerActive = segmentationManager != null && segmentationManager.isActiveAndEnabled;
            bool newManagerActive = asyncSegmentationManager != null && asyncSegmentationManager.isActiveAndEnabled;

            if (oldManagerActive && newManagerActive)
            {
                  Debug.LogWarning("‚ö†Ô∏è –û–ë–ê –ú–ï–ù–ï–î–ñ–ï–†–ê (—Å—Ç–∞—Ä—ã–π –∏ –Ω–æ–≤—ã–π) –ê–ö–¢–ò–í–ù–´ –í –°–¶–ï–ù–ï. –≠—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω.");
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –∫–∞–∫—É—é —Ç–µ–∫—Å—Ç—É—Ä—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
            RenderTexture activeTexture = null;
            string activeManagerName = "None";

            if (oldManagerActive && segmentationManager.GetSegmentationTexture() != null)
            {
                  activeTexture = segmentationManager.GetSegmentationTexture();
                  activeManagerName = "SegmentationManager (—Å—Ç–∞—Ä—ã–π)";
            }
            else if (newManagerActive && asyncSegmentationManager.GetSegmentationTexture() != null)
            {
                  activeTexture = asyncSegmentationManager.GetSegmentationTexture();
                  activeManagerName = "AsyncSegmentationManager (–Ω–æ–≤—ã–π)";
            }

            debugInfo += $"Active Manager: {activeManagerName}\n";
            debugInfo += $"Active Texture: {(activeTexture != null ? $"{activeTexture.width}x{activeTexture.height}" : "NULL")}\n";

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
            var globalSegmentationTexture = Shader.GetGlobalTexture("_GlobalSegmentationTexture");
            debugInfo += $"Global Shader Texture: {(globalSegmentationTexture != null ? $"{globalSegmentationTexture.width}x{globalSegmentationTexture.height}" : "NULL")}\n";

            // --- –ê–í–¢–û-–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ---
            if (activeTexture != null)
            {
                  // 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º RawImage, –µ—Å–ª–∏ –µ–≥–æ —Ç–µ–∫—Å—Ç—É—Ä–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∞–∫—Ç–∏–≤–Ω–æ–π
                  if (debugDisplay != null && debugDisplay.texture != activeTexture)
                  {
                        debugDisplay.texture = activeTexture;
                        Debug.Log($"[Auto-Fix] –ù–∞–∑–Ω–∞—á–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞ ({activeTexture.width}x{activeTexture.height}) –Ω–∞ {debugDisplay.name} –æ—Ç {activeManagerName}.");
                  }

                  // 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ —à–µ–π–¥–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
                  if (globalSegmentationTexture != activeTexture)
                  {
                        Shader.SetGlobalTexture("_GlobalSegmentationTexture", activeTexture);
                        Debug.Log($"[Auto-Fix] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –≥–ª–æ–±–∞–ª—å–Ω–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞ —à–µ–π–¥–µ—Ä–∞ –æ—Ç {activeManagerName}.");
                  }
            }

            if (debugText != null)
            {
                  debugText.text = debugInfo;
            }
            else
            {
                  if (Time.frameCount % 120 == 0) // –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å —Ä–∞–∑ –≤ 2 —Å–µ–∫—É–Ω–¥—ã
                  {
                        Debug.Log(debugInfo);
                  }
            }
      }

      [ContextMenu("Force Update Segmentation Display")]
      public void ForceUpdateSegmentationDisplay()
      {
            Debug.Log("üîç Force updating segmentation display...");

            // –ò—â–µ–º –≤—Å–µ RawImage –≤ —Å—Ü–µ–Ω–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö —Ç–µ–∫—Å—Ç—É—Ä—ã
            var allRawImages = FindObjectsOfType<RawImage>();

            foreach (var rawImage in allRawImages)
            {
                  Debug.Log($"RawImage '{rawImage.name}': texture = {rawImage.texture}");

                  if (rawImage.name.Contains("Segmentation") || rawImage.gameObject.name.Contains("Segmentation"))
                  {
                        // –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç—É—Ä—É
                        if (currentSegmentationTexture != null)
                        {
                              rawImage.texture = currentSegmentationTexture;
                              Debug.Log($"‚úÖ Updated {rawImage.name} with segmentation texture");
                        }
                  }
            }
      }

      [ContextMenu("Test Global Properties")]
      public void TestGlobalProperties()
      {
            Debug.Log("üß™ Testing global shader properties...");

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç–µ–∫—Å—Ç—É—Ä—É
            var testTexture = new RenderTexture(256, 256, 0, RenderTextureFormat.ARGB32);
            testTexture.enableRandomWrite = true;
            testTexture.Create();

            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–π —Ç–µ–∫—Å—Ç—É—Ä–æ–π –∫—Ä–∞—Å–Ω—ã–º —Ü–≤–µ—Ç–æ–º
            RenderTexture.active = testTexture;
            GL.Clear(true, true, Color.red);
            RenderTexture.active = null;

            Shader.SetGlobalTexture("_GlobalSegmentationTexture", testTexture);
            Debug.Log("‚úÖ Set test red texture as global segmentation texture");

            // –û–±–Ω–æ–≤–ª—è–µ–º display
            if (debugDisplay != null)
            {
                  debugDisplay.texture = testTexture;
            }

            // –£–±–∏—Ä–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            Invoke(nameof(ClearTestTexture), 3f);
      }

      void ClearTestTexture()
      {
            Debug.Log("üßπ Clearing test texture");
            Shader.SetGlobalTexture("_GlobalSegmentationTexture", currentSegmentationTexture);

            if (debugDisplay != null && currentSegmentationTexture != null)
            {
                  debugDisplay.texture = currentSegmentationTexture;
            }
      }
}