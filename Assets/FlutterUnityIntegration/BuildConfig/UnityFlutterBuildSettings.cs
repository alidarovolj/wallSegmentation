using UnityEngine;
using UnityEditor;
using System.IO;

#if UNITY_EDITOR

/// <summary>
/// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–±–æ—Ä–∫–∏ Unity –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Flutter
/// </summary>
public class UnityFlutterBuildSettings : EditorWindow
{
    private static string flutterProjectPath = "";
    private static string unityExportPath = "";
    private static BuildTarget selectedBuildTarget = BuildTarget.Android;

    [MenuItem("Flutter/Build Settings")]
    public static void ShowWindow()
    {
        GetWindow<UnityFlutterBuildSettings>("Unity-Flutter Build Settings");
    }

    private void OnGUI()
    {
        GUILayout.Label("Unity-Flutter Build Configuration", EditorStyles.boldLabel);
        EditorGUILayout.Space();

        // –í—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        selectedBuildTarget = (BuildTarget)EditorGUILayout.EnumPopup("Target Platform:", selectedBuildTarget);
        EditorGUILayout.Space();

        // –ü—É—Ç—å –∫ Flutter –ø—Ä–æ–µ–∫—Ç—É
        EditorGUILayout.LabelField("Flutter Project Path:");
        EditorGUILayout.BeginHorizontal();
        flutterProjectPath = EditorGUILayout.TextField(flutterProjectPath);
        if (GUILayout.Button("Browse", GUILayout.Width(100)))
        {
            flutterProjectPath = EditorUtility.OpenFolderPanel("Select Flutter Project", "", "");
        }
        EditorGUILayout.EndHorizontal();
        EditorGUILayout.Space();

        // –ü—É—Ç—å —ç–∫—Å–ø–æ—Ä—Ç–∞ Unity
        EditorGUILayout.LabelField("Unity Export Path:");
        EditorGUILayout.BeginHorizontal();
        unityExportPath = EditorGUILayout.TextField(unityExportPath);
        if (GUILayout.Button("Browse", GUILayout.Width(100)))
        {
            unityExportPath = EditorUtility.OpenFolderPanel("Select Export Path", "", "");
        }
        EditorGUILayout.EndHorizontal();
        EditorGUILayout.Space();

        // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        if (GUILayout.Button("Setup Build Settings"))
        {
            SetupBuildSettings();
        }

        if (GUILayout.Button("Build for Flutter"))
        {
            BuildForFlutter();
        }

        EditorGUILayout.Space();
        EditorGUILayout.HelpBox(
            "1. –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É\n" +
            "2. –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ Flutter –ø—Ä–æ–µ–∫—Ç—É\n" +
            "3. –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ Unity\n" +
            "4. –ù–∞–∂–º–∏—Ç–µ 'Setup Build Settings' –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n" +
            "5. –ù–∞–∂–º–∏—Ç–µ 'Build for Flutter' –¥–ª—è —Å–±–æ—Ä–∫–∏",
            MessageType.Info
        );
    }

    private static void SetupBuildSettings()
    {
        Debug.Log("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–±–æ—Ä–∫–∏ –¥–ª—è Flutter...");

        // –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        PlayerSettings.companyName = "YourCompany";
        PlayerSettings.productName = "RemaluxAR";

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Android
        if (selectedBuildTarget == BuildTarget.Android)
        {
            EditorUserBuildSettings.SwitchActiveBuildTarget(BuildTargetGroup.Android, BuildTarget.Android);

            PlayerSettings.Android.targetArchitectures = AndroidArchitecture.ARM64 | AndroidArchitecture.ARMv7;
            PlayerSettings.SetScriptingBackend(BuildTargetGroup.Android, ScriptingImplementation.IL2CPP);

            // AR Foundation —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
            PlayerSettings.Android.minSdkVersion = AndroidSdkVersions.AndroidApiLevel24;
            PlayerSettings.Android.targetSdkVersion = AndroidSdkVersions.AndroidApiLevelAuto;

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Flutter
            EditorUserBuildSettings.exportAsGoogleAndroidProject = true;
            EditorUserBuildSettings.androidBuildSystem = AndroidBuildSystem.Gradle;

            Debug.Log("‚úÖ Android –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã");
        }
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è iOS
        else if (selectedBuildTarget == BuildTarget.iOS)
        {
            EditorUserBuildSettings.SwitchActiveBuildTarget(BuildTargetGroup.iOS, BuildTarget.iOS);

            PlayerSettings.SetScriptingBackend(BuildTargetGroup.iOS, ScriptingImplementation.IL2CPP);
            PlayerSettings.iOS.targetOSVersionString = "11.0";

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è AR
            PlayerSettings.iOS.cameraUsageDescription = "This app uses the camera for AR functionality";

            Debug.Log("‚úÖ iOS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã");
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ü–µ–Ω
        SetupScenes();

        Debug.Log("üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
    }

    private static void SetupScenes()
    {
        // –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ –≥–ª–∞–≤–Ω–æ–π —Å—Ü–µ–Ω–µ
        string mainScenePath = "Assets/Scenes/SampleScene.unity";

        if (!File.Exists(mainScenePath))
        {
            Debug.LogError($"‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –≥–ª–∞–≤–Ω—É—é —Å—Ü–µ–Ω—É –ø–æ –ø—É—Ç–∏: {mainScenePath}");
            return;
        }

        // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Ç–æ–ª—å–∫–æ —Å –æ–¥–Ω–æ–π —Å—Ü–µ–Ω–æ–π
        EditorBuildSettingsScene[] scenes = new EditorBuildSettingsScene[1];
        scenes[0] = new EditorBuildSettingsScene(mainScenePath, true);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ü–µ–Ω—ã –¥–ª—è —Å–±–æ—Ä–∫–∏
        EditorBuildSettings.scenes = scenes;
        Debug.Log($"üìã –î–æ–±–∞–≤–ª–µ–Ω–∞ –≥–ª–∞–≤–Ω–∞—è —Å—Ü–µ–Ω–∞ –≤ —Å–±–æ—Ä–∫—É: {mainScenePath}");
    }

    private static void BuildForFlutter()
    {
        if (string.IsNullOrEmpty(unityExportPath))
        {
            Debug.LogError("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å —ç–∫—Å–ø–æ—Ä—Ç–∞!");
            EditorUtility.DisplayDialog("–û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ Unity –ø—Ä–æ–µ–∫—Ç–∞", "OK");
            return;
        }

        Debug.Log($"üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É –¥–ª—è {selectedBuildTarget}...");

        string buildPath = Path.Combine(unityExportPath, selectedBuildTarget.ToString());

        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (!Directory.Exists(buildPath))
        {
            Directory.CreateDirectory(buildPath);
        }

        BuildPlayerOptions buildPlayerOptions = new BuildPlayerOptions
        {
            scenes = GetScenePaths(),
            locationPathName = buildPath,
            target = selectedBuildTarget,
            options = BuildOptions.None
        };

        // –î–ª—è Android —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∫ Gradle –ø—Ä–æ–µ–∫—Ç
        if (selectedBuildTarget == BuildTarget.Android)
        {
            buildPlayerOptions.options = BuildOptions.AcceptExternalModificationsToPlayer;
        }

        var result = BuildPipeline.BuildPlayer(buildPlayerOptions);

        if (result.summary.result == UnityEditor.Build.Reporting.BuildResult.Succeeded)
        {
            Debug.Log($"‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! –ü—É—Ç—å: {buildPath}");

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            ShowIntegrationInstructions(buildPath);
        }
        else
        {
            Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏: {result.summary.result}");
        }
    }

    private static string[] GetScenePaths()
    {
        EditorBuildSettingsScene[] scenes = EditorBuildSettings.scenes;
        string[] scenePaths = new string[scenes.Length];

        for (int i = 0; i < scenes.Length; i++)
        {
            scenePaths[i] = scenes[i].path;
        }

        return scenePaths;
    }

    private static void ShowIntegrationInstructions(string buildPath)
    {
        string instructions = selectedBuildTarget == BuildTarget.Android ?
            GetAndroidInstructions(buildPath) :
            GetIOSInstructions(buildPath);

        EditorUtility.DisplayDialog("–°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", instructions, "OK");
    }

    private static string GetAndroidInstructions(string buildPath)
    {
        return $"Android —Å–±–æ—Ä–∫–∞ –≥–æ—Ç–æ–≤–∞!\n\n" +
               $"–ü—É—Ç—å: {buildPath}\n\n" +
               $"–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:\n" +
               $"1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–∞–ø–∫—É —Å–±–æ—Ä–∫–∏ –≤ –≤–∞—à Flutter –ø—Ä–æ–µ–∫—Ç\n" +
               $"2. –î–æ–±–∞–≤—å—Ç–µ flutter_unity_widget –≤ pubspec.yaml\n" +
               $"3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ README.md";
    }

    private static string GetIOSInstructions(string buildPath)
    {
        return $"iOS —Å–±–æ—Ä–∫–∞ –≥–æ—Ç–æ–≤–∞!\n\n" +
               $"–ü—É—Ç—å: {buildPath}\n\n" +
               $"–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:\n" +
               $"1. –û—Ç–∫—Ä–æ–π—Ç–µ .xcodeproj –≤ Xcode\n" +
               $"2. –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ —Å Flutter —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏\n" +
               $"3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ –∏ –ø—Ä–æ—Ñ–∏–ª–∏";
    }
}

#endif