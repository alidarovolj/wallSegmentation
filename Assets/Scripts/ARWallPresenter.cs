using UnityEngine;
using UnityEngine.XR.ARFoundation;
using UnityEngine.XR.ARSubsystems;

/// <summary>
/// –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π –æ–∫—Ä–∞—à–µ–Ω–Ω–æ–π —Å—Ç–µ–Ω—ã –≤ AR.
/// –ü–æ–ª—É—á–∞–µ—Ç –º–∞—Å–∫—É —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Å–≤–µ—â–µ–Ω–∏–∏,
/// –∞ –∑–∞—Ç–µ–º –ø–µ—Ä–µ–¥–∞–µ—Ç –∏—Ö –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —à–µ–π–¥–µ—Ä –¥–ª—è —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞.
/// </summary>
[RequireComponent(typeof(Renderer))]
public class ARWallPresenter : MonoBehaviour
{
    [Header("–°—Å—ã–ª–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")]
    [Tooltip("AR Camera Manager –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å ARKit. –ù–∞–∑–Ω–∞—á–∞—Ç—å –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.")]
    [SerializeField]
    private ARCameraManager arCameraManager;

    [Tooltip("–ú–∞—Ç–µ—Ä–∏–∞–ª, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π —à–µ–π–¥–µ—Ä –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∞—Å–∫–∏.")]
    [SerializeField]
    private Material visualizationMaterial;

    [Header("–†–µ–∂–∏–º—ã –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")]
    [Tooltip("–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–ª–∞—Å—Å—ã —Ä–∞–∑–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏. –ï—Å–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ, –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å (–æ–±—ã—á–Ω–æ —Å—Ç–µ–Ω—ã).")]
    [SerializeField]
    private bool showAllClasses = true; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –º—É–ª—å—Ç–∏-—Ü–≤–µ—Ç

    [Tooltip("–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ showAllClasses –æ—Ç–∫–ª—é—á–µ–Ω (0=—Å—Ç–µ–Ω—ã, 1=–ø–æ–ª, –∏ —Ç.–¥.).")]
    [SerializeField]
    private int singleClassId = 0;

    [Tooltip("–ë–∞–∑–æ–≤—ã–π —Ü–≤–µ—Ç –¥–ª—è —Ä–µ–∂–∏–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞.")]
    [SerializeField]
    private Color singleClassColor = Color.blue;

    [Tooltip("–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –Ω–∞–ª–æ–∂–µ–Ω–∏—è –º–∞—Å–∫–∏.")]
    [Range(0.0f, 1.0f)]
    [SerializeField]
    private float opacity = 0.7f;

    [Header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")]
    [Tooltip("–í–∫–ª—é—á–∏—Ç—å, –µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º AR-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ (–Ω–µ –≤ —Å–∏–º—É–ª—è—Ç–æ—Ä–µ).")]
    [SerializeField]
    private bool isRealDevice = true;

    private Renderer _renderer;
    private MaterialPropertyBlock _propertyBlock;

    // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Å–≤–æ–π—Å—Ç–≤ —à–µ–π–¥–µ—Ä–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    private static readonly int MaskTexId = Shader.PropertyToID("_MaskTex");
    private static readonly int SelectedClassId = Shader.PropertyToID("_SelectedClass");
    private static readonly int OpacityId = Shader.PropertyToID("_Opacity");
    private static readonly int PaintColorId = Shader.PropertyToID("_PaintColor");
    private static readonly int IsPortraitId = Shader.PropertyToID("_IsPortrait");
    private static readonly int IsRealDeviceId = Shader.PropertyToID("_IsRealDevice");

    // –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ü–≤–µ—Ç–æ–≤
    private AsyncSegmentationManager segmentationManager;


    void Awake()
    {
        _renderer = GetComponent<Renderer>();
        _propertyBlock = new MaterialPropertyBlock();

        if (visualizationMaterial != null)
        {
            _renderer.material = visualizationMaterial;
        }
        else
        {
            Debug.LogError("–ú–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ (visualizationMaterial) –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω!");
            this.enabled = false;
        }
    }

    void Start()
    {
        // –ù–∞—Ö–æ–¥–∏–º AsyncSegmentationManager –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ü–≤–µ—Ç–æ–≤
        segmentationManager = FindObjectOfType<AsyncSegmentationManager>();

        FitToScreen();
        ApplyShaderProperties();
    }

    void OnEnable()
    {
        // –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω—ã
    }

    void OnDisable()
    {
        // –û—Ç–ø–∏—Å–∫–∏ –æ—Ç —Å–æ–±—ã—Ç–∏–π, –µ—Å–ª–∏ –Ω—É–∂–Ω—ã
    }

    void Update()
    {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –≤ Update, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –º–µ–Ω—è—Ç—å –≤ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        ApplyShaderProperties();
    }

    /// <summary>
    /// –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑–≤–Ω–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, AsyncSegmentationManager)
    /// –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –º–∞—Å–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏.
    /// </summary>
    public void SetSegmentationMask(Texture maskTexture)
    {
        if (maskTexture != null && _propertyBlock != null)
        {
            _propertyBlock.SetTexture(MaskTexId, maskTexture);
            _renderer.SetPropertyBlock(_propertyBlock);
        }
    }

    /// <summary>
    /// –ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∫ —à–µ–π–¥–µ—Ä—É.
    /// </summary>
    private void ApplyShaderProperties()
    {
        if (_propertyBlock == null)
        {
            _propertyBlock = new MaterialPropertyBlock();
        }

        _renderer.GetPropertyBlock(_propertyBlock);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if (showAllClasses)
        {
            _propertyBlock.SetInt(SelectedClassId, -1); // -1 –¥–ª—è —à–µ–π–¥–µ—Ä–∞ –æ–∑–Ω–∞—á–∞–µ—Ç "–ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ"
        }
        else
        {
            _propertyBlock.SetInt(SelectedClassId, singleClassId);
            _propertyBlock.SetColor(PaintColorId, singleClassColor);
        }

        _propertyBlock.SetFloat(OpacityId, opacity);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é —ç–∫—Ä–∞–Ω–∞
        bool isPortrait = Screen.height > Screen.width;
        _propertyBlock.SetFloat(IsPortraitId, isPortrait ? 1.0f : 0.0f);

        // –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        _propertyBlock.SetFloat(IsRealDeviceId, isRealDevice ? 1.0f : 0.0f);

        _renderer.SetPropertyBlock(_propertyBlock);
    }

    /// <summary>
    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
    /// </summary>
    public void SetClassColor(int classId, Color color)
    {
        if (!showAllClasses)
        {
            // –ï—Å–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–¥–∏–Ω –∫–ª–∞—Å—Å, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ —Ü–≤–µ—Ç
            singleClassId = classId;
            singleClassColor = color;
            ApplyShaderProperties();

            Debug.Log($"üé® ARWallPresenter: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ü–≤–µ—Ç {ColorUtility.ToHtmlStringRGB(color)} –¥–ª—è –∫–ª–∞—Å—Å–∞ {classId}");
        }
    }

    [ContextMenu("–û–±–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–º–µ—Ä –ø–ª–æ—Å–∫–æ—Å—Ç–∏")]
    public void RefreshScreenFit()
    {
        FitToScreen();
    }

    private void FitToScreen()
    {
        Camera arCamera = FindObjectOfType<ARCameraManager>()?.GetComponent<Camera>();
        if (arCamera == null)
        {
            Debug.LogWarning("AR-–∫–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
            return;
        }

        transform.SetParent(arCamera.transform, false);
        transform.localPosition = Vector3.zero;
        transform.localRotation = Quaternion.identity;

        float distance = arCamera.nearClipPlane + 0.1f; // –†–∞–∑–º–µ—â–∞–µ–º –±–ª–∏–∑–∫–æ –∫ –∫–∞–º–µ—Ä–µ
        float height = 2.0f * distance * Mathf.Tan(arCamera.fieldOfView * 0.5f * Mathf.Deg2Rad);
        float width = height * arCamera.aspect;

        transform.localPosition = new Vector3(0, 0, distance);
        transform.localScale = new Vector3(width, height, 1);
    }
}
