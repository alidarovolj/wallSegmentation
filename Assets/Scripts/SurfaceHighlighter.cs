using UnityEngine;
using UnityEngine.Rendering;

/// <summary>
/// –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–æ–¥—Å–≤–µ—Ç–∫—É –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–≤–µ–¥–µ–Ω –∫—É—Ä—Å–æ—Ä/–ø–∞–ª–µ—Ü.
/// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–∞–∫–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç –ø–æ–∫—Ä–∞—à–µ–Ω–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
/// </summary>
public class SurfaceHighlighter : MonoBehaviour
{
      [Header("Highlight Settings")]
      [SerializeField] private Color highlightColor = new Color(1f, 1f, 1f, 0.3f);
      [SerializeField] private float pulseSpeed = 2f;
      [SerializeField] private bool enablePulse = true;

      [Header("References")]
      [SerializeField] private SegmentationManager segmentationManager;
      [SerializeField] private AsyncSegmentationManager asyncSegmentationManager; // –°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä

      // –¢–µ–∫—É—â–∏–π –∫–ª–∞—Å—Å –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º/–∫–∞—Å–∞–Ω–∏–µ–º
      private int currentHoveredClass = -1;
      private float pulseTime = 0f;
      private bool isReadbackInProgress = false; // –§–ª–∞–≥ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

      // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
      private static readonly int HighlightClassID = Shader.PropertyToID("_GlobalHighlightClassID");
      private static readonly int HighlightColor = Shader.PropertyToID("_GlobalHighlightColor");
      private static readonly int HighlightIntensity = Shader.PropertyToID("_GlobalHighlightIntensity");

      void Start()
      {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤
            Shader.SetGlobalInt(HighlightClassID, -1); // –ù–µ—Ç –ø–æ–¥—Å–≤–µ—Ç–∫–∏
            Shader.SetGlobalColor(HighlightColor, highlightColor);
            Shader.SetGlobalFloat(HighlightIntensity, 0f);
      }

      void Update()
      {
            UpdateHoverDetection();
            UpdatePulseAnimation();
      }

      void UpdateHoverDetection()
      {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏—é –º—ã—à–∏/–∫–∞—Å–∞–Ω–∏—è
            Vector2 inputPosition;
            bool hasInput = false;

#if UNITY_EDITOR || UNITY_STANDALONE
            // –ù–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º—ã—à—å
            inputPosition = Input.mousePosition;
            hasInput = true;
#elif UNITY_ANDROID || UNITY_IOS
        // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å–∞–Ω–∏–µ
        if (Input.touchCount > 0)
        {
            inputPosition = Input.GetTouch(0).position;
            hasInput = true;
        }
#endif

            if (hasInput && !isReadbackInProgress)
            {
                  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
                  ReadClassAtScreenPositionAsync(inputPosition);
            }
            else
            {
                  // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –µ—Å–ª–∏ –Ω–µ—Ç –≤–≤–æ–¥–∞
                  if (currentHoveredClass != -1)
                  {
                        currentHoveredClass = -1;
                        UpdateHighlight(-1);
                  }
            }
      }

      void UpdatePulseAnimation()
      {
            if (enablePulse && currentHoveredClass >= 0)
            {
                  pulseTime += Time.deltaTime * pulseSpeed;
                  float intensity = (Mathf.Sin(pulseTime) + 1f) * 0.5f; // 0-1 –¥–∏–∞–ø–∞–∑–æ–Ω
                  Shader.SetGlobalFloat(HighlightIntensity, intensity);
            }
            else
            {
                  pulseTime = 0f;
                  Shader.SetGlobalFloat(HighlightIntensity, currentHoveredClass >= 0 ? 1f : 0f);
            }
      }

      private void ReadClassAtScreenPositionAsync(Vector2 screenPos)
      {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π SegmentationManager –µ—Å–ª–∏ asyncSegmentationManager –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω
            RenderTexture segmentationTexture = null;

            if (asyncSegmentationManager != null)
            {
                  segmentationTexture = asyncSegmentationManager.GetSegmentationTexture();
            }
            else if (segmentationManager != null)
            {
                  // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç—É—Ä—É –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                  segmentationTexture = segmentationManager.GetSegmentationTexture();
            }

            if (segmentationTexture == null) return;

            isReadbackInProgress = true;

            // –ß–∏—Ç–∞–µ–º –≤—Å—é —Ç–µ–∫—Å—Ç—É—Ä—É. –î–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —ç—Ç–æ –ø—Ä–∏–µ–º–ª–µ–º–æ, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–µ –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä.
            AsyncGPUReadback.Request(segmentationTexture, 0, TextureFormat.RFloat, (request) =>
            {
                  isReadbackInProgress = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –≤ –∫–æ–ª–ª–±—ç–∫–µ

                  if (request.hasError)
                  {
                        Debug.LogError("‚ùå –û—à–∏–±–∫–∞ AsyncGPUReadback –≤ –ø–æ–¥—Å–≤–µ—Ç–∫–µ.");
                        return;
                  }

                  // –ò—Å–ø–æ–ª—å–∑—É–µ–º screenPos, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –≤ —ç—Ç–æ—Ç –≤—ã–∑–æ–≤, –∞ –Ω–µ Input.mousePosition,
                  // —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å race condition, –µ—Å–ª–∏ –º—ã—à—å —Å–¥–≤–∏–Ω–µ—Ç—Å—è –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞.
                  var readX = (int)(screenPos.x * ((float)request.width / Screen.width));
                  var readY = (int)(screenPos.y * ((float)request.height / Screen.height));

                  var data = request.GetData<float>();
                  int index = readY * request.width + readX;

                  if (data.Length > index)
                  {
                        int hoveredClass = (int)data[index];
                        if (hoveredClass != currentHoveredClass)
                        {
                              currentHoveredClass = hoveredClass;
                              UpdateHighlight(hoveredClass);
                        }
                  }
            });
      }

      void UpdateHighlight(int classID)
      {
            Shader.SetGlobalInt(HighlightClassID, classID);

            if (classID >= 0)
            {
                  Debug.Log($"üí° –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∫–ª–∞—Å—Å–∞: {classID}");
            }
      }

      /// <summary>
      /// –ú–µ—Ç–æ–¥—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∏–∑ –∫–æ–¥–∞
      /// </summary>
      public void SetHighlightColor(Color color)
      {
            highlightColor = color;
            Shader.SetGlobalColor(HighlightColor, color);
      }

      public void SetPulseEnabled(bool enabled)
      {
            enablePulse = enabled;
      }

      public void SetPulseSpeed(float speed)
      {
            pulseSpeed = speed;
      }
}