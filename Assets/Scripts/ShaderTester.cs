using UnityEngine;
using UnityEngine.UI;

/// <summary>
/// –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —à–µ–π–¥–µ—Ä–æ–≤ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–æ–∫—Ä–∞—Å–∫–∏ —Å—Ç–µ–Ω
/// </summary>
public class ShaderTester : MonoBehaviour
{
    [Header("–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")]
    [SerializeField] private Material simpleTestMaterial;
    [SerializeField] private Material photorealisticMaterial;
    [SerializeField] private Material originalMaterial;
    
    [Header("–°—Å—ã–ª–∫–∏")]
    [SerializeField] private ARWallPresenter arWallPresenter;
    [SerializeField] private Button testButton;
    
    private int currentShaderIndex = 0;
    private Material[] materials;
    private string[] shaderNames = { "Original", "Simple Test", "Photorealistic" };
    
    void Start()
    {
        materials = new Material[] { originalMaterial, simpleTestMaterial, photorealisticMaterial };
        
        if (testButton != null)
        {
            testButton.onClick.AddListener(SwitchShader);
            UpdateButtonText();
        }
        
        if (arWallPresenter == null)
        {
            arWallPresenter = FindObjectOfType<ARWallPresenter>();
        }
        
        Debug.Log("üß™ ShaderTester –≥–æ—Ç–æ–≤! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —à–µ–π–¥–µ—Ä–æ–≤.");
    }
    
    public void SwitchShader()
    {
        currentShaderIndex = (currentShaderIndex + 1) % materials.Length;
        
        if (arWallPresenter != null && materials[currentShaderIndex] != null)
        {
            // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–Ω–¥–µ—Ä–µ—Ä –∏ –º–µ–Ω—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
            var renderer = arWallPresenter.GetComponent<Renderer>();
            if (renderer != null)
            {
                renderer.material = materials[currentShaderIndex];
                Debug.Log($"üé® –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —à–µ–π–¥–µ—Ä: {shaderNames[currentShaderIndex]}");
                
                // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç
                if (currentShaderIndex == 1) // Simple Test
                {
                    renderer.material.SetColor("_TestColor", Color.red);
                    Debug.Log("üî¥ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞");
                }
                // –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏–Ω–∏–π —Ü–≤–µ—Ç
                else if (currentShaderIndex == 2) // Photorealistic
                {
                    renderer.material.SetColor("_PaintColor", Color.blue);
                    renderer.material.SetFloat("_EdgeSoftness", 0.1f);
                    renderer.material.SetFloat("_GlobalBrightness", 1.0f);
                    renderer.material.SetColor("_RealWorldLightColor", Color.white);
                    Debug.Log("üîµ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å–∏–Ω–∏–π —Ü–≤–µ—Ç –¥–ª—è —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ —à–µ–π–¥–µ—Ä–∞");
                }
            }
        }
        else
        {
            Debug.LogWarning("‚ö†Ô∏è ARWallPresenter –∏–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!");
        }
        
        UpdateButtonText();
    }
    
    private void UpdateButtonText()
    {
        if (testButton != null)
        {
            var text = testButton.GetComponentInChildren<Text>();
            if (text != null)
            {
                text.text = $"Shader: {shaderNames[currentShaderIndex]}";
            }
        }
    }
    
    void Update()
    {
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –∫–ª–∞–≤–∏—à–µ T –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if (Input.GetKeyDown(KeyCode.T))
        {
            SwitchShader();
        }
    }
}