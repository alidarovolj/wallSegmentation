using UnityEngine;
using UnityEngine.UI;

public class SimpleColorPicker : MonoBehaviour
{
      [Tooltip("The segmentation manager to control.")]
      public AsyncSegmentationManager segmentationManager;

      [Tooltip("A list of UI buttons that will act as color swatches.")]
      public Button[] colorButtons;

      void Start()
      {
            if (segmentationManager == null)
            {
                  // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–æ
                  segmentationManager = FindObjectOfType<AsyncSegmentationManager>();
                  if (segmentationManager == null)
                  {
                        Debug.LogError("SimpleColorPicker: AsyncSegmentationManager –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ü–µ–Ω–µ!");
                        return;
                  }
            }

            // –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏
            foreach (var button in colorButtons)
            {
                  // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç —Å–∞–º–æ–π –∫–Ω–æ–ø–∫–∏
                  Color buttonColor = button.GetComponent<Image>().color;
                  button.onClick.AddListener(() => OnColorButtonClick(buttonColor));
            }
      }

      void OnColorButtonClick(Color color)
      {
            if (segmentationManager != null)
            {
                  Debug.Log($"üé® –í—ã–±—Ä–∞–Ω —Ü–≤–µ—Ç: {color}");
                  segmentationManager.SetPaintColor(color);
            }
      }
}