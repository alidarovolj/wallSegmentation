#if UNITY_EDITOR
using UnityEngine;
using UnityEditor;
using UnityEngine.XR.ARFoundation;
using Unity.XR.CoreUtils;
using UnityEngine.UI;
using TMPro;
using Unity.Sentis;

/// <summary>
/// Unity Editor Wizard –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AR Painting —Å–∏—Å—Ç–µ–º—ã
/// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
/// </summary>
public class ARPaintingSetupWizard : EditorWindow
{
      private bool includeTestComponents = true;
      private bool includePerformanceMonitoring = true;
      private bool createSampleMaterials = true;
      private bool setupForMobile = true;

      private ModelAsset segmentationModel;
      private ComputeShader preprocessorShader;
      private ComputeShader postProcessShader;

      private Vector2 scrollPosition;

      [MenuItem("AR Painting/Setup Wizard")]
      public static void ShowWindow()
      {
            var window = GetWindow<ARPaintingSetupWizard>("AR Painting Setup");
            window.minSize = new Vector2(400, 600);
            window.Show();
      }

      void OnGUI()
      {
            scrollPosition = EditorGUILayout.BeginScrollView(scrollPosition);

            EditorGUILayout.Space(10);

            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            GUILayout.Label("AR Painting Setup Wizard", EditorStyles.largeLabel);
            EditorGUILayout.HelpBox("–≠—Ç–æ—Ç –º–∞—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–∏—Ç –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é AR Painting —Å–∏—Å—Ç–µ–º—É –≤ –≤–∞—à–µ–π —Å—Ü–µ–Ω–µ.", MessageType.Info);

            EditorGUILayout.Space(10);

            // –°–µ–∫—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            DrawConfigurationSection();

            EditorGUILayout.Space(10);

            // –°–µ–∫—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
            DrawResourcesSection();

            EditorGUILayout.Space(10);

            // –°–µ–∫—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π
            DrawActionsSection();

            EditorGUILayout.Space(10);

            // –°–µ–∫—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            DrawInfoSection();

            EditorGUILayout.EndScrollView();
      }

      void DrawConfigurationSection()
      {
            EditorGUILayout.LabelField("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", EditorStyles.boldLabel);

            includeTestComponents = EditorGUILayout.Toggle("–í–∫–ª—é—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã", includeTestComponents);
            includePerformanceMonitoring = EditorGUILayout.Toggle("–í–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", includePerformanceMonitoring);
            createSampleMaterials = EditorGUILayout.Toggle("–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤", createSampleMaterials);
            setupForMobile = EditorGUILayout.Toggle("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤", setupForMobile);
      }

      void DrawResourcesSection()
      {
            EditorGUILayout.LabelField("–†–µ—Å—É—Ä—Å—ã", EditorStyles.boldLabel);

            segmentationModel = (ModelAsset)EditorGUILayout.ObjectField("–ú–æ–¥–µ–ª—å —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏", segmentationModel, typeof(ModelAsset), false);
            preprocessorShader = (ComputeShader)EditorGUILayout.ObjectField("Preprocessor Shader", preprocessorShader, typeof(ComputeShader), false);
            postProcessShader = (ComputeShader)EditorGUILayout.ObjectField("PostProcess Shader", postProcessShader, typeof(ComputeShader), false);

            EditorGUILayout.Space(5);

            if (GUILayout.Button("–ù–∞–π—Ç–∏ —Ä–µ—Å—É—Ä—Å—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"))
            {
                  FindResourcesAutomatically();
            }

            if (segmentationModel == null || preprocessorShader == null || postProcessShader == null)
            {
                  EditorGUILayout.HelpBox("–ù–µ –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞–π—Ç–∏ —Ä–µ—Å—É—Ä—Å—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏' –∏–ª–∏ –Ω–∞–∑–Ω–∞—á—å—Ç–µ –∏—Ö –≤—Ä—É—á–Ω—É—é.", MessageType.Warning);
            }
      }

      void DrawActionsSection()
      {
            EditorGUILayout.LabelField("–î–µ–π—Å—Ç–≤–∏—è", EditorStyles.boldLabel);

            GUI.enabled = CanSetupScene();

            if (GUILayout.Button("üöÄ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å AR Painting —Å—Ü–µ–Ω—É", GUILayout.Height(40)))
            {
                  SetupARPaintingScene();
            }

            GUI.enabled = true;

            EditorGUILayout.Space(5);

            EditorGUILayout.BeginHorizontal();

            if (GUILayout.Button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ü–µ–Ω—É"))
            {
                  ValidateScene();
            }

            if (GUILayout.Button("–û—á–∏—Å—Ç–∏—Ç—å —Å—Ü–µ–Ω—É"))
            {
                  ClearScene();
            }

            EditorGUILayout.EndHorizontal();

            if (GUILayout.Button("–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ü–µ–Ω—É"))
            {
                  CreateTestScene();
            }
      }

      void DrawInfoSection()
      {
            EditorGUILayout.LabelField("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", EditorStyles.boldLabel);

            EditorGUILayout.HelpBox(
                "AR Painting —Å–∏—Å—Ç–µ–º–∞ –≤–∫–ª—é—á–∞–µ—Ç:\n" +
                "‚Ä¢ AsyncSegmentationManager - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è ML –æ–±—Ä–∞–±–æ—Ç–∫–∞\n" +
                "‚Ä¢ PerformanceMonitor - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n" +
                "‚Ä¢ MemoryPoolManager - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é\n" +
                "‚Ä¢ SurfaceHighlighter - –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π\n" +
                "‚Ä¢ CommandSystem - Undo/Redo —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å\n" +
                "‚Ä¢ –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π UI —Å –ø–∞–ª–∏—Ç—Ä–æ–π —Ü–≤–µ—Ç–æ–≤",
                MessageType.Info
            );

            if (GUILayout.Button("–û—Ç–∫—Ä—ã—Ç—å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"))
            {
                  Application.OpenURL("file://" + Application.dataPath + "/../IMPLEMENTATION_GUIDE.md");
            }

            if (GUILayout.Button("–û—Ç–∫—Ä—ã—Ç—å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"))
            {
                  Application.OpenURL("file://" + Application.dataPath + "/../PERFORMANCE_OPTIMIZATION_GUIDE.md");
            }
      }

      bool CanSetupScene()
      {
            return segmentationModel != null && preprocessorShader != null && postProcessShader != null;
      }

      void FindResourcesAutomatically()
      {
            // –ò—â–µ–º –º–æ–¥–µ–ª—å —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
            var modelGuids = AssetDatabase.FindAssets("t:ModelAsset");
            foreach (var guid in modelGuids)
            {
                  var path = AssetDatabase.GUIDToAssetPath(guid);
                  if (path.Contains("model") || path.Contains("segmentation"))
                  {
                        segmentationModel = AssetDatabase.LoadAssetAtPath<ModelAsset>(path);
                        break;
                  }
            }

            // –ò—â–µ–º Compute Shaders
            var shaderGuids = AssetDatabase.FindAssets("t:ComputeShader");
            foreach (var guid in shaderGuids)
            {
                  var path = AssetDatabase.GUIDToAssetPath(guid);
                  var shader = AssetDatabase.LoadAssetAtPath<ComputeShader>(path);

                  if (path.Contains("Preprocessor") || path.Contains("ImagePreprocessor"))
                  {
                        preprocessorShader = shader;
                  }
                  else if (path.Contains("PostProcess"))
                  {
                        postProcessShader = shader;
                  }
            }

            Debug.Log($"‚úÖ –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: Model={segmentationModel != null}, Preprocessor={preprocessorShader != null}, PostProcess={postProcessShader != null}");
      }

      void SetupARPaintingScene()
      {
            Debug.Log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É AR Painting —Å—Ü–µ–Ω—ã...");

            try
            {
                  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Undo –æ–ø–µ—Ä–∞—Ü–∏—é –±–µ–∑–æ–ø–∞—Å–Ω–æ
                  if (Selection.activeGameObject != null)
                  {
                        Undo.RegisterCompleteObjectUndo(Selection.activeGameObject, "Setup AR Painting Scene");
                  }

                  // 1. –°–æ–∑–¥–∞–µ–º AR Foundation –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                  CreateARFoundationSetup();

                  // 2. –°–æ–∑–¥–∞–µ–º Core —Å–∏—Å—Ç–µ–º—É
                  CreateCoreSystem();

                  // 3. –°–æ–∑–¥–∞–µ–º UI
                  CreateUISystem();

                  // 4. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Performance Monitoring
                  if (includePerformanceMonitoring)
                  {
                        CreatePerformanceMonitoring();
                  }

                  // 5. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                  if (includeTestComponents)
                  {
                        CreateTestComponents();
                  }

                  // 6. –°–æ–∑–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
                  if (createSampleMaterials)
                  {
                        CreateSampleMaterials();
                  }

                  // 7. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                  if (setupForMobile)
                  {
                        ConfigureForMobile();
                  }

                  // 8. –°–≤—è–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                  LinkAllComponents();

                  EditorUtility.SetDirty(null);

                  Debug.Log("‚úÖ AR Painting —Å—Ü–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!");

                  EditorUtility.DisplayDialog("–£—Å–ø–µ—Ö!",
                      "AR Painting —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!\n\n" +
                      "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã –∏ —Å–≤—è–∑–∞–Ω—ã.\n" +
                      "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ü–µ–Ω—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
                      "OK");
            }
            catch (System.Exception e)
            {
                  Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ü–µ–Ω—ã: {e.Message}");
                  EditorUtility.DisplayDialog("–û—à–∏–±–∫–∞", $"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ü–µ–Ω—ã:\n{e.Message}", "OK");
            }
      }

      void CreateARFoundationSetup()
      {
            Debug.Log("üì± –°–æ–∑–¥–∞–Ω–∏–µ AR Foundation setup...");

            // AR Session
            if (FindObjectOfType<ARSession>() == null)
            {
                  var arSession = new GameObject("AR Session");
                  arSession.AddComponent<ARSession>();
            }

            // XR Origin
            var sessionOrigin = FindObjectOfType<XROrigin>();
            if (sessionOrigin == null)
            {
                  var sessionOriginGO = new GameObject("XR Origin");
                  sessionOrigin = sessionOriginGO.AddComponent<XROrigin>();

                  // AR Camera
                  var arCamera = new GameObject("AR Camera");
                  arCamera.transform.SetParent(sessionOriginGO.transform);

                  var camera = arCamera.AddComponent<Camera>();
                  camera.clearFlags = CameraClearFlags.Color;
                  camera.backgroundColor = Color.black;
                  camera.nearClipPlane = 0.1f;
                  camera.farClipPlane = 20f;

                  arCamera.AddComponent<ARCameraManager>();
                  arCamera.AddComponent<ARCameraBackground>();

                  sessionOrigin.Camera = camera;
            }

            // AR Mesh Manager –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ XROrigin
            if (sessionOrigin.GetComponent<ARMeshManager>() == null)
            {
                  try
                  {
                        sessionOrigin.gameObject.AddComponent<ARMeshManager>();
                        Debug.Log("‚úÖ AR Mesh Manager –¥–æ–±–∞–≤–ª–µ–Ω");
                  }
                  catch (System.Exception e)
                  {
                        Debug.LogWarning($"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å ARMeshManager: {e.Message}");
                  }
            }
      }

      void CreateCoreSystem()
      {
            Debug.Log("üîß –°–æ–∑–¥–∞–Ω–∏–µ Core —Å–∏—Å—Ç–µ–º—ã...");

            var coreGO = new GameObject("AR Painting Core");

            // AsyncSegmentationManager
            var segManager = coreGO.AddComponent<AsyncSegmentationManager>();
            SetupSegmentationManager(segManager);

            // PaintManager
            coreGO.AddComponent<PaintManager>();

            // CommandManager
            coreGO.AddComponent<CommandManager>();

            // MemoryPoolManager
            coreGO.AddComponent<MemoryPoolManager>();

            // CameraFeedCapture –Ω–∞ AR Camera
            var arCamera = FindObjectOfType<ARCameraManager>();
            if (arCamera != null)
            {
                  if (arCamera.GetComponent<CameraFeedCapture>() == null)
                  {
                        arCamera.gameObject.AddComponent<CameraFeedCapture>();
                  }

                  if (arCamera.GetComponent<SurfaceHighlighter>() == null)
                  {
                        arCamera.gameObject.AddComponent<SurfaceHighlighter>();
                  }
            }
      }

      void SetupSegmentationManager(AsyncSegmentationManager segManager)
      {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º Reflection –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –ø–æ–ª–µ–π
            var segType = typeof(AsyncSegmentationManager);

            // –ù–∞–∑–Ω–∞—á–∞–µ–º –º–æ–¥–µ–ª—å
            var modelField = segType.GetField("modelAsset", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            modelField?.SetValue(segManager, segmentationModel);

            // –ù–∞–∑–Ω–∞—á–∞–µ–º —à–µ–π–¥–µ—Ä—ã
            var preprocessorField = segType.GetField("preprocessorShader", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            preprocessorField?.SetValue(segManager, preprocessorShader);

            var postProcessField = segType.GetField("postProcessShader", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            postProcessField?.SetValue(segManager, postProcessShader);

            // –ù–∞–∑–Ω–∞—á–∞–µ–º AR Camera Manager
            var arCameraManager = FindObjectOfType<ARCameraManager>();
            var cameraField = segType.GetField("arCameraManager", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            cameraField?.SetValue(segManager, arCameraManager);
      }

      void CreateUISystem()
      {
            Debug.Log("üé® –°–æ–∑–¥–∞–Ω–∏–µ UI —Å–∏—Å—Ç–µ–º—ã...");

            // –ì–ª–∞–≤–Ω—ã–π Canvas
            var canvasGO = new GameObject("AR Painting UI");
            var canvas = canvasGO.AddComponent<Canvas>();
            canvas.renderMode = RenderMode.ScreenSpaceOverlay;
            canvas.sortingOrder = 100;

            canvasGO.AddComponent<CanvasScaler>();
            canvasGO.AddComponent<GraphicRaycaster>();

            // UIManager
            var uiManager = canvasGO.AddComponent<UIManager>();

            // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ UI —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–ø—Ä—è–º—É—é
            CreateBasicUIElements(canvasGO);
      }

      void CreateBasicUIElements(GameObject canvasGO)
      {
            // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ü–≤–µ—Ç–æ–≤—É—é –ø–∞–ª–∏—Ç—Ä—É
            var palettePanel = new GameObject("Color Palette");
            palettePanel.transform.SetParent(canvasGO.transform);

            var paletteRect = palettePanel.AddComponent<RectTransform>();
            paletteRect.anchorMin = new Vector2(0.02f, 0.7f);
            paletteRect.anchorMax = new Vector2(0.25f, 0.98f);
            paletteRect.offsetMin = Vector2.zero;
            paletteRect.offsetMax = Vector2.zero;

            var paletteImage = palettePanel.AddComponent<Image>();
            paletteImage.color = new Color(0, 0, 0, 0.7f);

            // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ü–≤–µ—Ç–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
            Color[] colors = { Color.red, Color.green, Color.blue, Color.yellow, Color.cyan, Color.magenta };

            for (int i = 0; i < colors.Length; i++)
            {
                  var colorButton = new GameObject($"Color Button {i}");
                  colorButton.transform.SetParent(palettePanel.transform);

                  var buttonRect = colorButton.AddComponent<RectTransform>();
                  buttonRect.sizeDelta = new Vector2(60, 60);
                  buttonRect.anchoredPosition = new Vector2(35 + (i % 2) * 70, -35 - (i / 2) * 70);

                  var buttonImage = colorButton.AddComponent<Image>();
                  buttonImage.color = colors[i];

                  var button = colorButton.AddComponent<Button>();
                  button.targetGraphic = buttonImage;

                  // –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
                  var color = colors[i];
                  button.onClick.AddListener(() =>
                  {
                        Shader.SetGlobalColor("_GlobalPaintColor", color);
                        Debug.Log($"Selected color: {color}");
                  });
            }

            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É Clear
            var clearButton = new GameObject("Clear Button");
            clearButton.transform.SetParent(canvasGO.transform);

            var clearRect = clearButton.AddComponent<RectTransform>();
            clearRect.anchorMin = new Vector2(0.02f, 0.02f);
            clearRect.anchorMax = new Vector2(0.2f, 0.1f);
            clearRect.offsetMin = Vector2.zero;
            clearRect.offsetMax = Vector2.zero;

            var clearImage = clearButton.AddComponent<Image>();
            clearImage.color = new Color(0.8f, 0.2f, 0.2f, 0.8f);

            var clearButtonComponent = clearButton.AddComponent<Button>();
            clearButtonComponent.targetGraphic = clearImage;
            clearButtonComponent.onClick.AddListener(() =>
            {
                  Shader.SetGlobalInt("_GlobalTargetClassID", -1);
                  Debug.Log("Painting cleared");
            });

            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫ –∫–Ω–æ–ø–∫–µ Clear
            var clearText = new GameObject("Text");
            clearText.transform.SetParent(clearButton.transform);

            var clearTextRect = clearText.AddComponent<RectTransform>();
            clearTextRect.anchorMin = Vector2.zero;
            clearTextRect.anchorMax = Vector2.one;
            clearTextRect.offsetMin = Vector2.zero;
            clearTextRect.offsetMax = Vector2.zero;

            var clearTextComponent = clearText.AddComponent<Text>();
            clearTextComponent.text = "Clear";
            clearTextComponent.alignment = TextAnchor.MiddleCenter;
            clearTextComponent.color = Color.white;
            clearTextComponent.font = Resources.GetBuiltinResource<Font>("LegacyRuntime.ttf");
            clearTextComponent.fontSize = 16;
      }

      void CreatePerformanceMonitoring()
      {
            Debug.Log("üìä –°–æ–∑–¥–∞–Ω–∏–µ Performance Monitoring...");

            var perfGO = new GameObject("Performance Monitor");
            perfGO.AddComponent<PerformanceMonitor>();
      }

      void CreateTestComponents()
      {
            Debug.Log("üß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...");

            var testGO = new GameObject("AR Painting Tester");
            testGO.AddComponent<ARPaintingTester>();
      }

      void CreateSampleMaterials()
      {
            Debug.Log("üé≠ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...");

            // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if (!AssetDatabase.IsValidFolder("Assets/Materials"))
            {
                  AssetDatabase.CreateFolder("Assets", "Materials");
            }

            // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –ø–æ–∫—Ä–∞—Å–∫–∏
            var paintMaterial = new Material(Shader.Find("Unlit/SurfacePaintShader"));
            AssetDatabase.CreateAsset(paintMaterial, "Assets/Materials/SurfacePaintMaterial.mat");

            // –°–æ–∑–¥–∞–µ–º PBR –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –ø–æ–∫—Ä–∞—Å–∫–∏
            var pbrMaterial = new Material(Shader.Find("Custom/PBRSurfacePaintShader"));
            AssetDatabase.CreateAsset(pbrMaterial, "Assets/Materials/PBRSurfacePaintMaterial.mat");

            AssetDatabase.SaveAssets();
            AssetDatabase.Refresh();

            Debug.Log("‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã —Å–æ–∑–¥–∞–Ω—ã –≤ Assets/Materials/");
      }

      void ConfigureForMobile()
      {
            Debug.Log("üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤...");

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
            QualitySettings.vSyncCount = 0;
            Application.targetFrameRate = 30;

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
            var camera = FindObjectOfType<Camera>();
            if (camera != null)
            {
                  camera.allowMSAA = false;
                  camera.allowHDR = false;
            }

            Debug.Log("‚úÖ –ú–æ–±–∏–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞");
      }

      void LinkAllComponents()
      {
            Debug.Log("üîó –°–≤—è–∑—ã–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...");

            var segManager = FindObjectOfType<AsyncSegmentationManager>();
            var paintManager = FindObjectOfType<PaintManager>();
            var uiManager = FindObjectOfType<UIManager>();
            var commandManager = FindObjectOfType<CommandManager>();
            var perfMonitor = FindObjectOfType<PerformanceMonitor>();

            // –°–≤—è–∑—ã–≤–∞–µ–º UIManager
            if (uiManager != null)
            {
                  var uiType = typeof(UIManager);
                  var paintField = uiType.GetField("paintManager", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance);
                  var segField = uiType.GetField("segmentationManager", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance);
                  var cmdField = uiType.GetField("commandManager", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance);

                  paintField?.SetValue(uiManager, paintManager);
                  segField?.SetValue(uiManager, segManager);
                  cmdField?.SetValue(uiManager, commandManager);
            }

            // –°–≤—è–∑—ã–≤–∞–µ–º PerformanceMonitor
            if (perfMonitor != null && segManager != null)
            {
                  var perfType = typeof(PerformanceMonitor);
                  var segField = perfType.GetField("segmentationManager", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
                  segField?.SetValue(perfMonitor, segManager);
            }

            Debug.Log("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–≤—è–∑–∞–Ω—ã");
      }

      void ValidateScene()
      {
            Debug.Log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ü–µ–Ω—ã...");

            var errors = new System.Collections.Generic.List<string>();
            var warnings = new System.Collections.Generic.List<string>();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º AR Foundation
            if (FindObjectOfType<ARSession>() == null)
                  errors.Add("ARSession –Ω–µ –Ω–∞–π–¥–µ–Ω");

            if (FindObjectOfType<XROrigin>() == null)
                  errors.Add("XROrigin –Ω–µ –Ω–∞–π–¥–µ–Ω");

            if (FindObjectOfType<ARCameraManager>() == null)
                  errors.Add("ARCameraManager –Ω–µ –Ω–∞–π–¥–µ–Ω");

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º Core –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            if (FindObjectOfType<AsyncSegmentationManager>() == null)
                  errors.Add("AsyncSegmentationManager –Ω–µ –Ω–∞–π–¥–µ–Ω");

            if (FindObjectOfType<PaintManager>() == null)
                  warnings.Add("PaintManager –Ω–µ –Ω–∞–π–¥–µ–Ω");

            if (FindObjectOfType<MemoryPoolManager>() == null)
                  warnings.Add("MemoryPoolManager –Ω–µ –Ω–∞–π–¥–µ–Ω");

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º UI
            if (FindObjectOfType<UIManager>() == null)
                  warnings.Add("UIManager –Ω–µ –Ω–∞–π–¥–µ–Ω");

            // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if (errors.Count == 0 && warnings.Count == 0)
            {
                  EditorUtility.DisplayDialog("–í–∞–ª–∏–¥–∞—Ü–∏—è", "‚úÖ –°—Ü–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!", "OK");
            }
            else
            {
                  var message = "";
                  if (errors.Count > 0)
                  {
                        message += "‚ùå –û–®–ò–ë–ö–ò:\n" + string.Join("\n", errors) + "\n\n";
                  }
                  if (warnings.Count > 0)
                  {
                        message += "‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:\n" + string.Join("\n", warnings);
                  }

                  EditorUtility.DisplayDialog("–í–∞–ª–∏–¥–∞—Ü–∏—è", message, "OK");
            }
      }

      void ClearScene()
      {
            if (EditorUtility.DisplayDialog("–û—á–∏—Å—Ç–∫–∞ —Å—Ü–µ–Ω—ã",
                "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ AR Painting –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ —Å—Ü–µ–Ω—ã?",
                "–î–∞", "–û—Ç–º–µ–Ω–∞"))
            {
                  Debug.Log("üßπ –û—á–∏—Å—Ç–∫–∞ AR Painting —Å—Ü–µ–Ω—ã...");

                  var objectsToDelete = new string[] {
                "AR Session", "AR Session Origin", "AR Painting Core",
                "AR Painting UI", "Performance Monitor", "AR Painting Tester"
            };

                  foreach (var objName in objectsToDelete)
                  {
                        var obj = GameObject.Find(objName);
                        if (obj != null)
                        {
                              Undo.DestroyObjectImmediate(obj);
                        }
                  }

                  Debug.Log("‚úÖ –°—Ü–µ–Ω–∞ –æ—á–∏—â–µ–Ω–∞");
            }
      }

      void CreateTestScene()
      {
            Debug.Log("üß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ü–µ–Ω—ã...");

            var scenePath = "Assets/Scenes/ARPaintingTest.unity";

            if (EditorUtility.DisplayDialog("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ü–µ–Ω—ã",
                $"–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ü–µ–Ω—É –ø–æ –ø—É—Ç–∏:\n{scenePath}?",
                "–î–∞", "–û—Ç–º–µ–Ω–∞"))
            {
                  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ü–µ–Ω—É
                  var newScene = UnityEditor.SceneManagement.EditorSceneManager.NewScene(
                      UnityEditor.SceneManagement.NewSceneSetup.EmptyScene,
                      UnityEditor.SceneManagement.NewSceneMode.Single
                  );

                  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º AR Painting
                  SetupARPaintingScene();

                  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ü–µ–Ω—É
                  if (!AssetDatabase.IsValidFolder("Assets/Scenes"))
                  {
                        AssetDatabase.CreateFolder("Assets", "Scenes");
                  }

                  UnityEditor.SceneManagement.EditorSceneManager.SaveScene(newScene, scenePath);

                  Debug.Log($"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ü–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞: {scenePath}");
            }
      }
}
#endif