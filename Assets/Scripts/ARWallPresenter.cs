using UnityEngine;
using UnityEngine.XR.ARFoundation;
using UnityEngine.XR.ARSubsystems;

/// <summary>
/// –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π –æ–∫—Ä–∞—à–µ–Ω–Ω–æ–π —Å—Ç–µ–Ω—ã –≤ AR.
/// –ü–æ–ª—É—á–∞–µ—Ç –º–∞—Å–∫—É —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Å–≤–µ—â–µ–Ω–∏–∏,
/// –∞ –∑–∞—Ç–µ–º –ø–µ—Ä–µ–¥–∞–µ—Ç –∏—Ö –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —à–µ–π–¥–µ—Ä –¥–ª—è —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞.
/// </summary>
[RequireComponent(typeof(Renderer))]
public class ARWallPresenter : MonoBehaviour
{
    [Header("–°—Å—ã–ª–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")]
    [Tooltip("AR Camera Manager –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å ARKit. –ù–∞–∑–Ω–∞—á–∞—Ç—å –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.")]
    [SerializeField]
    private ARCameraManager arCameraManager;

    [Tooltip("–ú–∞—Ç–µ—Ä–∏–∞–ª, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π —à–µ–π–¥–µ—Ä –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∞—Å–∫–∏.")]
    [SerializeField]
    private Material visualizationMaterial;

    [Header("–†–µ–∂–∏–º—ã –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")]
    [Tooltip("–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–ª–∞—Å—Å—ã —Ä–∞–∑–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏. –ï—Å–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ, –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å (–æ–±—ã—á–Ω–æ —Å—Ç–µ–Ω—ã).")]
    [SerializeField]
    private bool showAllClasses = true; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –º—É–ª—å—Ç–∏-—Ü–≤–µ—Ç

    [Tooltip("–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ showAllClasses –æ—Ç–∫–ª—é—á–µ–Ω (0=—Å—Ç–µ–Ω—ã, 1=–ø–æ–ª, –∏ —Ç.–¥.).")]
    [SerializeField]
    private int singleClassId = 0;

    [Tooltip("–ë–∞–∑–æ–≤—ã–π —Ü–≤–µ—Ç –¥–ª—è —Ä–µ–∂–∏–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞.")]
    [SerializeField]
    private Color singleClassColor = Color.blue;

    [Tooltip("–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –Ω–∞–ª–æ–∂–µ–Ω–∏—è –º–∞—Å–∫–∏.")]
    [Range(0.0f, 1.0f)]
    [SerializeField]
    private float opacity = 0.7f;

    [Header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")]
    [Tooltip("–í–∫–ª—é—á–∏—Ç—å, –µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º AR-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ (–Ω–µ –≤ —Å–∏–º—É–ª—è—Ç–æ—Ä–µ).")]
    [SerializeField]
    private bool isRealDevice = true;

    private Renderer _renderer;
    private MaterialPropertyBlock _propertyBlock;

    // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Å–≤–æ–π—Å—Ç–≤ —à–µ–π–¥–µ—Ä–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    private static readonly int MaskTexId = Shader.PropertyToID("_MaskTex");
    private static readonly int SelectedClassId = Shader.PropertyToID("_SelectedClass");
    private static readonly int OpacityId = Shader.PropertyToID("_Opacity");
    private static readonly int PaintColorId = Shader.PropertyToID("_PaintColor");
    // private static readonly int IsPortraitId = Shader.PropertyToID("_IsPortrait"); // –£–¥–∞–ª–µ–Ω–æ, —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è DisplayMatrix
    private static readonly int IsRealDeviceId = Shader.PropertyToID("_IsRealDevice");
    private static readonly int DisplayMatrixId = Shader.PropertyToID("_DisplayMatrix");

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—Å–ø–µ–∫—Ç–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ UV –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    private static readonly int ScreenAspectId = Shader.PropertyToID("_ScreenAspect");
    private static readonly int MaskAspectId = Shader.PropertyToID("_MaskAspect");
    private static readonly int ForceFullscreenId = Shader.PropertyToID("_ForceFullscreen");

    // –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ü–≤–µ—Ç–æ–≤
    private AsyncSegmentationManager segmentationManager;

    // –ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —ç–∫—Ä–∞–Ω–∞
    private int lastScreenWidth;
    private int lastScreenHeight;

    // –ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —à–µ–π–¥–µ—Ä
    private Matrix4x4 displayMatrix = Matrix4x4.identity;

    // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ª—É—á–µ–Ω–Ω–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞ –º–∞—Å–∫–∏ (–¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –∞—Å–ø–µ–∫—Ç–æ–≤ –ø—Ä–∏ —Å–º–µ–Ω–µ —ç–∫—Ä–∞–Ω–∞)
    private Texture lastMaskTexture;


    void Awake()
    {
        _renderer = GetComponent<Renderer>();
        _propertyBlock = new MaterialPropertyBlock();

        // –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –Ω–∞—Ö–æ–¥–∏–º ARCameraManager
        if (arCameraManager == null)
        {
            arCameraManager = FindObjectOfType<ARCameraManager>();
        }

        if (visualizationMaterial != null)
        {
            _renderer.material = visualizationMaterial;
        }
        else
        {
            Debug.LogError("–ú–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ (visualizationMaterial) –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω!");
            this.enabled = false;
        }
    }

    void Start()
    {
        // –ù–∞—Ö–æ–¥–∏–º AsyncSegmentationManager –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ü–≤–µ—Ç–æ–≤
        segmentationManager = FindObjectOfType<AsyncSegmentationManager>();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
        lastScreenWidth = Screen.width;
        lastScreenHeight = Screen.height;

        FitToScreen();
        ApplyShaderProperties();

        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Å–ø–µ–∫—Ç–∞—Ö
        float screenAspect = (float)Screen.width / Screen.height;
        Debug.Log($"üöÄ ARWallPresenter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. Screen aspect: {screenAspect:F3} ({Screen.width}x{Screen.height})");
    }

    void OnEnable()
    {
        if (arCameraManager != null)
        {
            arCameraManager.frameReceived += OnFrameReceived;
        }
    }

    void OnDisable()
    {
        if (arCameraManager != null)
        {
            arCameraManager.frameReceived -= OnFrameReceived;
        }
    }

    void Update()
    {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –≤ Update, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –º–µ–Ω—è—Ç—å –≤ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        ApplyShaderProperties();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
        if (isRealDevice && Time.frameCount % 30 == 0) // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ –ø–æ–ª—Å–µ–∫—É–Ω–¥—ã
        {
            CheckAndUpdateScreenSize();
        }
    }

    /// <summary>
    /// –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑–≤–Ω–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, AsyncSegmentationManager)
    /// –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –º–∞—Å–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏.
    /// </summary>
    public void SetSegmentationMask(Texture maskTexture)
    {
        if (maskTexture != null && _propertyBlock != null)
        {
            lastMaskTexture = maskTexture;
            _propertyBlock.SetTexture(MaskTexId, maskTexture);

            // –í—ã—á–∏—Å–ª—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—Å–ø–µ–∫—Ç–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
            // UpdateAspectParameters(maskTexture); // –û–¢–ö–õ–Æ–ß–ï–ù–û: –≠—Ç–∞ –ª–æ–≥–∏–∫–∞ —Ç–µ–ø–µ—Ä—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω–µ–Ω–∞ DisplayMatrix –≤ —à–µ–π–¥–µ—Ä–µ

            _renderer.SetPropertyBlock(_propertyBlock);
        }
    }

    /// <summary>
    /// –ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∫ —à–µ–π–¥–µ—Ä—É.
    /// </summary>
    private void ApplyShaderProperties()
    {
        if (_propertyBlock == null)
        {
            _propertyBlock = new MaterialPropertyBlock();
        }

        _renderer.GetPropertyBlock(_propertyBlock);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if (showAllClasses)
        {
            _propertyBlock.SetInt(SelectedClassId, -1); // -1 –¥–ª—è —à–µ–π–¥–µ—Ä–∞ –æ–∑–Ω–∞—á–∞–µ—Ç "–ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ"
        }
        else
        {
            _propertyBlock.SetInt(SelectedClassId, singleClassId);
            _propertyBlock.SetColor(PaintColorId, singleClassColor);
        }

        _propertyBlock.SetFloat(OpacityId, opacity);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é —ç–∫—Ä–∞–Ω–∞ - –ë–û–õ–¨–®–ï –ù–ï –ù–£–ñ–ù–û, DisplayMatrix –¥–µ–ª–∞–µ—Ç —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        // bool isPortrait = Screen.height > Screen.width;
        // _propertyBlock.SetFloat(IsPortraitId, isPortrait ? 1.0f : 0.0f);

        // –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ –º–∞—Ç—Ä–∏—Ü—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        _propertyBlock.SetFloat(IsRealDeviceId, isRealDevice ? 1.0f : 0.0f);
        _propertyBlock.SetMatrix(DisplayMatrixId, displayMatrix);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—Å–ø–µ–∫—Ç–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ UV –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        float screenAspect = (float)Screen.width / Screen.height;
        float maskAspect = 1.0f; // –ú–∞—Å–∫–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω–∞—è
        _propertyBlock.SetFloat(ScreenAspectId, screenAspect);
        _propertyBlock.SetFloat(MaskAspectId, maskAspect);
        _propertyBlock.SetInt(ForceFullscreenId, 1); // –í–∫–ª—é—á–∞–µ–º –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º

        // –í–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –ë–û–õ–¨–®–ï –ù–ï –ù–£–ñ–ù–´
        // _propertyBlock.SetInt(ForceFullscreenId, 1);
        // if (segmentationManager != null)
        // {
        //     int rotationMode = GetMaskRotationModeFromManager();
        //     _propertyBlock.SetInt(RotationModeId, rotationMode);
        // }

        _renderer.SetPropertyBlock(_propertyBlock);
    }

    /// <summary>
    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
    /// </summary>
    public void SetClassColor(int classId, Color color)
    {
        if (!showAllClasses)
        {
            // –ï—Å–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–¥–∏–Ω –∫–ª–∞—Å—Å, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ —Ü–≤–µ—Ç
            singleClassId = classId;
            singleClassColor = color;
            ApplyShaderProperties();

            Debug.Log($"üé® ARWallPresenter: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ü–≤–µ—Ç {ColorUtility.ToHtmlStringRGB(color)} –¥–ª—è –∫–ª–∞—Å—Å–∞ {classId}");
        }
    }

    /// <summary>
    /// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã crop –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Å–∫–∏
    /// </summary>
    public void SetCropParameters(float cropOffsetX, float cropOffsetY, float cropScale)
    {
        if (_propertyBlock == null)
        {
            _propertyBlock = new MaterialPropertyBlock();
        }

        _propertyBlock.SetFloat("_CropOffsetX", cropOffsetX);
        _propertyBlock.SetFloat("_CropOffsetY", cropOffsetY);
        _propertyBlock.SetFloat("_CropScale", cropScale);

        if (_renderer != null)
        {
            _renderer.SetPropertyBlock(_propertyBlock);
        }

        Debug.Log($"üìê ARWallPresenter: Crop –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã - Offset({cropOffsetX:F3}, {cropOffsetY:F3}), Scale: {cropScale:F3}");
    }

    [ContextMenu("–û–±–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–º–µ—Ä –ø–ª–æ—Å–∫–æ—Å—Ç–∏")]
    public void RefreshScreenFit()
    {
        FitToScreen();
    }

    // –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ ContextMenu –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ–¥–∞

    private void FitToScreen()
    {
        Camera arCamera = FindObjectOfType<ARCameraManager>()?.GetComponent<Camera>();
        if (arCamera == null)
        {
            Debug.LogWarning("AR-–∫–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
            return;
        }

        transform.SetParent(arCamera.transform, false);
        transform.localPosition = Vector3.zero;
        transform.localRotation = Quaternion.identity;

        // –†–∞–∑–º–µ—â–∞–µ–º –±–ª–∏–∑–∫–æ –∫ –∫–∞–º–µ—Ä–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —ç–∫—Ä–∞–Ω–∞
        float distance = arCamera.nearClipPlane + 0.01f;

        // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞ –≤ –º–∏—Ä–æ–≤—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏
        float height = 2.0f * distance * Mathf.Tan(arCamera.fieldOfView * 0.5f * Mathf.Deg2Rad);
        float width = height * arCamera.aspect;

        // –î–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è –í–°–ï–ì–û —ç–∫—Ä–∞–Ω–∞, –≤–∫–ª—é—á–∞—è —Å—Ç–∞—Ç—É—Å-–±–∞—Ä –∏ –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if (isRealDevice)
        {
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –Ω–∞ 30% –¥–ª—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
            width *= 1.30f;
            height *= 1.30f;

            // –ù–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö —Ä–∞–∑–º–µ—â–∞–µ–º –ø–ª–æ—Å–∫–æ—Å—Ç—å –±–ª–∏–∑–∫–æ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
            distance = arCamera.nearClipPlane + 0.01f;
        }
        else
        {
            // –í —Å–∏–º—É–ª—è—Ç–æ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
            // –î–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–Ω—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤ –º–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ–º –∏—Å–∫–∞–∂–µ–Ω–∏—è
            float screenAspect = (float)Screen.width / Screen.height;

            if (screenAspect < 1.0f) // –ü–æ—Ä—Ç—Ä–µ—Ç
            {
                width *= 1.08f; // –£–º–µ—Ä–µ–Ω–Ω–æ–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Ç—è–∂–µ–Ω–∏–µ
                height *= 1.12f; // –£–º–µ—Ä–µ–Ω–Ω–æ–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ
            }
            else // –õ–∞–Ω–¥—à–∞—Ñ—Ç
            {
                width *= 1.12f;
                height *= 1.08f;
            }

            Debug.Log($"üéÆ –°–∏–º—É–ª—è—Ç–æ—Ä: —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ - screenAspect={screenAspect:F2}, width={width:F2}, height={height:F2}");
        }

        transform.localPosition = new Vector3(0, 0, distance);
        transform.localScale = new Vector3(width, height, 1);

        Debug.Log($"üìê ARWallPresenter FitToScreen: device={isRealDevice}, distance={distance}, width={width}, height={height}, aspect={arCamera.aspect}");
    }

    /// <summary>
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—Å–ø–µ–∫—Ç–∞ –≤ —à–µ–π–¥–µ—Ä–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Å–∫–∏ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
    /// </summary>
    private void UpdateAspectParameters(Texture maskTexture)
    {
        // –≠–¢–ê –§–£–ù–ö–¶–ò–Ø –ë–û–õ–¨–®–ï –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø. –í–°–Ø –õ–û–ì–ò–ö–ê –ü–ï–†–ï–ù–ï–°–ï–ù–ê –í –®–ï–ô–î–ï–† –ò –£–ü–†–ê–í–õ–Ø–ï–¢–°–Ø _DisplayMatrix
        return;

        /*
        if (maskTexture == null) return;

        float screenAspect = (float)Screen.width / Screen.height;
        float maskAspect = (float)maskTexture.width / maskTexture.height;

        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏–º –ø–æ–≤–æ—Ä–æ—Ç–∞ –∏–∑ AsyncSegmentationManager
        int rotationMode = GetMaskRotationModeFromManager();

        // –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–≤–æ—Ä–æ—Ç –º–∞—Å–∫–∏ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –∞—Å–ø–µ–∫—Ç–∞
        // –ï—Å–ª–∏ –ø–æ–≤–æ—Ä–æ—Ç –Ω–∞ 90 –∏–ª–∏ -90 –≥—Ä–∞–¥—É—Å–æ–≤, –º–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ —à–∏—Ä–∏–Ω—É –∏ –≤—ã—Å–æ—Ç—É
        if (rotationMode == 0 || rotationMode == 1)
        {
            maskAspect = 1.0f / maskAspect; // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∞—Å–ø–µ–∫—Ç –¥–ª—è –ø–æ–≤–æ—Ä–æ—Ç–∞ –Ω–∞ 90¬∞
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É —Ä–∞—Å—á–µ—Ç–∞
        float aspectRatio = screenAspect / maskAspect;

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫ PropertyBlock
        if (_propertyBlock != null)
        {
            _propertyBlock.SetFloat(ScreenAspectId, screenAspect);
            _propertyBlock.SetFloat(MaskAspectId, maskAspect);
            _propertyBlock.SetFloat(AspectRatioId, aspectRatio);
            _propertyBlock.SetInt(RotationModeId, rotationMode);

            // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            string deviceType = isRealDevice ? "–†–µ–∞–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ" : "–°–∏–º—É–ª—è—Ç–æ—Ä";
            Debug.Log($"üì± {deviceType} - ARWallPresenter Aspect: Screen={screenAspect:F2}, Mask={maskAspect:F2} (rotation {rotationMode}), Ratio={aspectRatio:F2}");
        }
        */
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∂–∏–º –ø–æ–≤–æ—Ä–æ—Ç–∞ –º–∞—Å–∫–∏ –∏–∑ AsyncSegmentationManager
    /// </summary>
    private int GetMaskRotationModeFromManager()
    {
        if (segmentationManager != null)
        {
            // –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞. –í—Å—è –ª–æ–≥–∏–∫–∞ –±—É–¥–µ—Ç –≤ —à–µ–π–¥–µ—Ä–µ.
            return segmentationManager.GetMaskRotationMode();
        }

        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        return 0;
    }

    private void OnFrameReceived(ARCameraFrameEventArgs eventArgs)
    {
        if (eventArgs.displayMatrix.HasValue)
        {
            displayMatrix = eventArgs.displayMatrix.Value;
        }
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–ª–æ—Å–∫–æ—Å—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    /// </summary>
    private void CheckAndUpdateScreenSize()
    {
        if (Screen.width != lastScreenWidth || Screen.height != lastScreenHeight)
        {
            Debug.Log($"üì± –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞: {lastScreenWidth}x{lastScreenHeight} ‚Üí {Screen.width}x{Screen.height}");

            lastScreenWidth = Screen.width;
            lastScreenHeight = Screen.height;

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–ª–æ—Å–∫–æ—Å—Ç–∏
            FitToScreen();

            // –ï—Å–ª–∏ —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å –º–∞—Å–∫–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—Å–ø–µ–∫—Ç–∞
            // if (_propertyBlock != null && lastMaskTexture != null)
            // {
            // UpdateAspectParameters(lastMaskTexture); // –û–¢–ö–õ–Æ–ß–ï–ù–û
            // _renderer.SetPropertyBlock(_propertyBlock);
            // }
        }
    }
}
