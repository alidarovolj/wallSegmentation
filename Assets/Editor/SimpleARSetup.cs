#if UNITY_EDITOR
using UnityEngine;
using UnityEditor;
using UnityEngine.XR.ARFoundation;
using Unity.XR.CoreUtils;
using Unity.Sentis;
using UnityEngine.UI;
using UnityEngine.EventSystems;

/// <summary>
/// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –Ω–∞—Å—Ç—Ä–æ–π—â–∏–∫ AR Painting –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ü–µ–Ω
/// </summary>
public class SimpleARSetup : EditorWindow
{
      [MenuItem("AR Painting/Simple Setup")]
      public static void ShowWindow()
      {
            var window = GetWindow<SimpleARSetup>("Simple AR Setup");
            window.minSize = new Vector2(400, 300);
            window.Show();
      }

      void OnGUI()
      {
            GUILayout.Label("Simple AR Painting Setup", EditorStyles.largeLabel);

            EditorGUILayout.HelpBox("–≠—Ç–æ—Ç —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–∞—Å—Ç–µ—Ä –¥–æ–±–∞–≤–∏—Ç AR Painting –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π AR —Å—Ü–µ–Ω–µ.", MessageType.Info);

            EditorGUILayout.Space(10);

            if (GUILayout.Button("üîç –ù–∞–π—Ç–∏ –∏ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å AR –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã", GUILayout.Height(40)))
            {
                  SetupARPainting();
            }

            EditorGUILayout.Space(10);

            if (GUILayout.Button("üßπ –£–¥–∞–ª–∏—Ç—å AR Painting –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"))
            {
                  CleanupARPainting();
            }

            EditorGUILayout.Space(10);

            EditorGUILayout.HelpBox(
                "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º AR –æ–±—ä–µ–∫—Ç–∞–º:\n" +
                "‚Ä¢ AsyncSegmentationManager ‚Üí AR Camera\n" +
                "‚Ä¢ CameraFeedCapture ‚Üí AR Camera\n" +
                "‚Ä¢ SurfaceHighlighter ‚Üí AR Camera\n" +
                "‚Ä¢ PaintManager ‚Üí –ù–æ–≤—ã–π –æ–±—ä–µ–∫—Ç\n" +
                "‚Ä¢ –ü—Ä–æ—Å—Ç–æ–π UI ‚Üí Canvas",
                MessageType.Info
            );
      }

      void SetupARPainting()
      {
            Debug.Log("üöÄ –ü—Ä–æ—Å—Ç–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ AR Painting...");

            try
            {
                  // –ù–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ AR –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                  var arCameraManager = FindObjectOfType<ARCameraManager>();
                  var xrOrigin = FindObjectOfType<XROrigin>();

                  if (arCameraManager == null)
                  {
                        EditorUtility.DisplayDialog("–û—à–∏–±–∫–∞", "AR Camera Manager –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ AR —Å—Ü–µ–Ω–∞.", "OK");
                        return;
                  }

                  // 1. –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∫ AR Camera
                  AddComponentSafely<CameraFeedCapture>(arCameraManager.gameObject, "CameraFeedCapture");
                  AddComponentSafely<SurfaceHighlighter>(arCameraManager.gameObject, "SurfaceHighlighter");

                  var segManager = AddComponentSafely<AsyncSegmentationManager>(arCameraManager.gameObject, "AsyncSegmentationManager");

                  // 2. –°–æ–∑–¥–∞–µ–º Core Manager
                  var coreGO = GameObject.Find("AR Painting Core");
                  if (coreGO == null)
                  {
                        coreGO = new GameObject("AR Painting Core");
                        Debug.Log("‚úÖ AR Painting Core —Å–æ–∑–¥–∞–Ω");
                  }

                  AddComponentSafely<PaintManager>(coreGO, "PaintManager");
                  AddComponentSafely<CommandManager>(coreGO, "CommandManager");
                  AddComponentSafely<MemoryPoolManager>(coreGO, "MemoryPoolManager");

                  // 3. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º AsyncSegmentationManager
                  if (segManager != null)
                  {
                        SetupSegmentationManager(segManager, arCameraManager);
                  }

                  // 4. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π UI
                  CreateSimpleUI();

                  // 5. –î–æ–±–∞–≤–ª—è–µ–º ARMeshManager –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                  if (xrOrigin != null && xrOrigin.GetComponent<ARMeshManager>() == null)
                  {
                        try
                        {
                              xrOrigin.gameObject.AddComponent<ARMeshManager>();
                              Debug.Log("‚úÖ ARMeshManager –¥–æ–±–∞–≤–ª–µ–Ω –∫ XROrigin");
                        }
                        catch (System.Exception e)
                        {
                              Debug.LogWarning($"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å ARMeshManager: {e.Message}");
                        }
                  }

                  EditorUtility.DisplayDialog("–£—Å–ø–µ—Ö!",
                      "AR Painting –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!\n\n" +
                      "–ù–µ –∑–∞–±—É–¥—å—Ç–µ:\n" +
                      "‚Ä¢ –ù–∞–∑–Ω–∞—á–∏—Ç—å –º–æ–¥–µ–ª—å –≤ AsyncSegmentationManager\n" +
                      "‚Ä¢ –ù–∞–∑–Ω–∞—á–∏—Ç—å —à–µ–π–¥–µ—Ä—ã\n" +
                      "‚Ä¢ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ Play Mode",
                      "OK");

            }
            catch (System.Exception e)
            {
                  Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e.Message}");
                  EditorUtility.DisplayDialog("–û—à–∏–±–∫–∞", $"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e.Message}", "OK");
            }
      }

      T AddComponentSafely<T>(GameObject target, string componentName) where T : Component
      {
            if (target.GetComponent<T>() == null)
            {
                  var component = target.AddComponent<T>();
                  Debug.Log($"‚úÖ {componentName} –¥–æ–±–∞–≤–ª–µ–Ω –∫ {target.name}");
                  return component;
            }
            else
            {
                  Debug.Log($"‚ÑπÔ∏è {componentName} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ {target.name}");
                  return target.GetComponent<T>();
            }
      }

      void SetupSegmentationManager(AsyncSegmentationManager segManager, ARCameraManager arCameraManager)
      {
            Debug.Log("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ AsyncSegmentationManager...");

            // –ê–≤—Ç–æ–ø–æ–∏—Å–∫ —Ä–µ—Å—É—Ä—Å–æ–≤
            var modelGuids = AssetDatabase.FindAssets("t:ModelAsset");
            ModelAsset foundModel = null;
            foreach (var guid in modelGuids)
            {
                  var path = AssetDatabase.GUIDToAssetPath(guid);
                  foundModel = AssetDatabase.LoadAssetAtPath<ModelAsset>(path);
                  if (foundModel != null) break;
            }

            var shaderGuids = AssetDatabase.FindAssets("t:ComputeShader");
            ComputeShader preprocessor = null;
            ComputeShader postProcess = null;

            foreach (var guid in shaderGuids)
            {
                  var path = AssetDatabase.GUIDToAssetPath(guid);
                  var shader = AssetDatabase.LoadAssetAtPath<ComputeShader>(path);

                  if (path.Contains("Preprocessor") || path.Contains("ImagePreprocessor"))
                  {
                        preprocessor = shader;
                  }
                  else if (path.Contains("PostProcess"))
                  {
                        postProcess = shader;
                  }
            }

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º reflection –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –ø–æ–ª–µ–π
            var segType = typeof(AsyncSegmentationManager);

            if (foundModel != null)
            {
                  var modelField = segType.GetField("modelAsset", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
                  modelField?.SetValue(segManager, foundModel);
                  Debug.Log($"‚úÖ –ú–æ–¥–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∞: {foundModel.name}");
            }

            if (preprocessor != null)
            {
                  var preprocessorField = segType.GetField("preprocessorShader", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
                  preprocessorField?.SetValue(segManager, preprocessor);
                  Debug.Log($"‚úÖ Preprocessor –Ω–∞–∑–Ω–∞—á–µ–Ω: {preprocessor.name}");
            }

            if (postProcess != null)
            {
                  var postProcessField = segType.GetField("postProcessShader", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
                  postProcessField?.SetValue(segManager, postProcess);
                  Debug.Log($"‚úÖ PostProcess –Ω–∞–∑–Ω–∞—á–µ–Ω: {postProcess.name}");
            }

            var cameraField = segType.GetField("arCameraManager", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            cameraField?.SetValue(segManager, arCameraManager);
            Debug.Log("‚úÖ AR Camera Manager –Ω–∞–∑–Ω–∞—á–µ–Ω");
      }

      void CreateSimpleUI()
      {
            Debug.Log("üé® –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ UI...");

            // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º Canvas
            var canvas = FindObjectOfType<Canvas>();
            if (canvas == null)
            {
                  var canvasGO = new GameObject("AR Painting Canvas");
                  canvas = canvasGO.AddComponent<Canvas>();
                  canvas.renderMode = RenderMode.ScreenSpaceOverlay;
                  canvasGO.AddComponent<CanvasScaler>();
                  canvasGO.AddComponent<GraphicRaycaster>();
                  Debug.Log("‚úÖ Canvas —Å–æ–∑–¥–∞–Ω");
            }

            // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            CreateTestButton(canvas.transform, "Red Paint", Color.red, new Vector2(-200, 200));
            CreateTestButton(canvas.transform, "Green Paint", Color.green, new Vector2(-200, 150));
            CreateTestButton(canvas.transform, "Blue Paint", Color.blue, new Vector2(-200, 100));
            CreateTestButton(canvas.transform, "Clear", Color.white, new Vector2(-200, 50));

            Debug.Log("‚úÖ –ü—Ä–æ—Å—Ç–æ–π UI —Å–æ–∑–¥–∞–Ω");
      }

      void CreateTestButton(Transform parent, string text, Color color, Vector2 position)
      {
            var buttonGO = new GameObject(text + " Button");
            buttonGO.transform.SetParent(parent);

            var rectTransform = buttonGO.AddComponent<RectTransform>();
            rectTransform.sizeDelta = new Vector2(120, 30);
            rectTransform.anchoredPosition = position;

            var image = buttonGO.AddComponent<UnityEngine.UI.Image>();
            image.color = color == Color.white ? new Color(0.5f, 0.5f, 0.5f) : color;

            var button = buttonGO.AddComponent<UnityEngine.UI.Button>();
            button.targetGraphic = image;

            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            var textGO = new GameObject("Text");
            textGO.transform.SetParent(buttonGO.transform);

            var textRect = textGO.AddComponent<RectTransform>();
            textRect.anchorMin = Vector2.zero;
            textRect.anchorMax = Vector2.one;
            textRect.offsetMin = Vector2.zero;
            textRect.offsetMax = Vector2.zero;

            var textComponent = textGO.AddComponent<UnityEngine.UI.Text>();
            textComponent.text = text;
            textComponent.alignment = TextAnchor.MiddleCenter;
            textComponent.color = Color.white;
            textComponent.font = Resources.GetBuiltinResource<Font>("LegacyRuntime.ttf");
            textComponent.fontSize = 12;

            // –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
            if (text == "Clear")
            {
                  button.onClick.AddListener(() =>
                  {
                        Shader.SetGlobalInt("_GlobalTargetClassID", -1);
                        Debug.Log("üßπ Painting cleared");
                  });
            }
            else
            {
                  button.onClick.AddListener(() =>
                  {
                        Shader.SetGlobalColor("_GlobalPaintColor", color);
                        Debug.Log($"üé® Color selected: {color}");
                  });
            }
      }

      void CleanupARPainting()
      {
            if (EditorUtility.DisplayDialog("–£–¥–∞–ª–µ–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ AR Painting –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã?", "–î–∞", "–û—Ç–º–µ–Ω–∞"))
            {
                  Debug.Log("üßπ –£–¥–∞–ª–µ–Ω–∏–µ AR Painting –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...");

                  // –£–¥–∞–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å AR Camera
                  var arCamera = FindObjectOfType<ARCameraManager>();
                  if (arCamera != null)
                  {
                        DestroyComponent<CameraFeedCapture>(arCamera.gameObject);
                        DestroyComponent<SurfaceHighlighter>(arCamera.gameObject);
                        DestroyComponent<AsyncSegmentationManager>(arCamera.gameObject);
                  }

                  // –£–¥–∞–ª—è–µ–º Core –æ–±—ä–µ–∫—Ç
                  var coreGO = GameObject.Find("AR Painting Core");
                  if (coreGO != null)
                  {
                        DestroyImmediate(coreGO);
                        Debug.Log("‚úÖ AR Painting Core —É–¥–∞–ª–µ–Ω");
                  }

                  Debug.Log("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
            }
      }

      void DestroyComponent<T>(GameObject target) where T : Component
      {
            var component = target.GetComponent<T>();
            if (component != null)
            {
                  DestroyImmediate(component);
                  Debug.Log($"‚úÖ {typeof(T).Name} —É–¥–∞–ª–µ–Ω —Å {target.name}");
            }
      }
}
#endif