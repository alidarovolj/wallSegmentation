using UnityEngine;
using System.Collections;

/// <summary>
/// –û—Å–Ω–æ–≤–Ω–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –º–µ–∂–¥—É Flutter –∏ Unity
/// </summary>
public class FlutterUnityManager : MonoBehaviour
{
      public static FlutterUnityManager Instance;

      [Header("Configuration")]
      [Tooltip("–í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º")]
      public bool debugMode = true;

      [Header("Dependencies")]
      [Tooltip("–°—Å—ã–ª–∫–∞ –Ω–∞ AsyncSegmentationManager")]
      [SerializeField]
      private AsyncSegmentationManager segmentationManager;

      // –ü–æ–ª–µ –¥–ª—è ARWallPresenter, –∫–∞–∫ –≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
      [SerializeField]
      private ARWallPresenter arWallPresenter;


      private void Awake()
      {
            // Singleton pattern
            if (Instance == null)
            {
                  Instance = this;
                  DontDestroyOnLoad(gameObject);
            }
            else
            {
                  Destroy(gameObject);
                  return;
            }

            InitializeManager();
      }

      void OnEnable()
      {
            Debug.Log("‚úÖ FlutterUnityManager –≤–∫–ª—é—á–µ–Ω –∏ –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è");
      }

      private void InitializeManager()
      {
            if (debugMode)
            {
                  Debug.Log("üîó FlutterUnityManager initialized");
            }

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã
            if (segmentationManager == null)
            {
                  segmentationManager = FindObjectOfType<AsyncSegmentationManager>();
            }

            if (arWallPresenter == null)
            {
                  arWallPresenter = FindObjectOfType<ARWallPresenter>();
            }


            // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã
            if (segmentationManager == null)
            {
                  Debug.LogWarning("‚ö†Ô∏è AsyncSegmentationManager –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            }

            if (arWallPresenter == null)
            {
                  Debug.LogWarning("‚ö†Ô∏è ARWallPresenter –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            }
      }

      private void Start()
      {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Unity
            StartCoroutine(SendInitialState());
      }

      private IEnumerator SendInitialState()
      {
            // –ñ–¥–µ–º –æ–¥–∏–Ω –∫–∞–¥—Ä, —á—Ç–æ–±—ã –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏—Å—å
            yield return new WaitForSeconds(1f);

            SendMessage("onUnityReady", "Unity scene loaded and ready");
      }

      #region Flutter to Unity Communication

      /// <summary>
      /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏—è –∏–∑ Flutter (HEX —Ñ–æ—Ä–º–∞—Ç)
      /// </summary>
      /// <param name="hexColor">–¶–≤–µ—Ç –≤ HEX —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, #FF5733)</param>
      public void SetPaintColor(string hexColor)
      {
            Debug.Log($"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ SetPaintColor: {hexColor}");
            if (debugMode)
            {
                  Debug.Log($"üé® Flutter -> Unity: SetPaintColor({hexColor})");
            }

            if (string.IsNullOrEmpty(hexColor))
            {
                  Debug.LogError("‚ùå –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Ü–≤–µ—Ç –æ—Ç Flutter");
                  return;
            }

            if (segmentationManager != null)
            {
                  if (ColorUtility.TryParseHtmlString(hexColor, out Color color))
                  {
                        segmentationManager.SetPaintColor(color);
                        Debug.Log($"‚úÖ –¶–≤–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω –∫ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏: {color}");

                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ Flutter
                        SendMessage("colorChanged", $"Color changed to {hexColor}");
                  }
                  else
                  {
                        Debug.LogError($"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Ü–≤–µ—Ç: {hexColor}");
                        SendMessage("error", $"Invalid color format: {hexColor}");
                  }
            }
            else
            {
                  Debug.LogError("‚ùå SegmentationManager –Ω–µ –Ω–∞–π–¥–µ–Ω!");
                  SendMessage("error", "SegmentationManager not found");
            }
      }

      /// <summary>
      /// –í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è
      /// </summary>
      public void SetPaintingMode(string isEnabled)
      {
            bool enabled = isEnabled.ToLower() == "true";
            Debug.Log($"üñåÔ∏è Flutter -> Unity: SetPaintingMode({enabled})");

            // –í AsyncSegmentationManager –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ SetPaintingEnabled
            // segmentationManager?.SetPaintingEnabled(enabled);

            SendMessage("paintingModeChanged", enabled.ToString());
      }

      /// <summary>
      /// –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –ø–æ–∫—Ä–∞—à–µ–Ω–Ω—ã–µ —Å—Ç–µ–Ω—ã
      /// </summary>
      public void ResetWalls(string unused)
      {
            Debug.Log("üîÑ Flutter -> Unity: ResetWalls");

            // –í AsyncSegmentationManager –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ ResetPaint
            // segmentationManager?.ResetPaint();

            SendMessage("wallsReset", "Walls have been reset");
      }

      /// <summary>
      /// –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤—Å–ø—ã—à–∫—É –∫–∞–º–µ—Ä—ã
      /// </summary>
      public void ToggleFlashlight(string unused)
      {
            Debug.Log("üî¶ Flutter -> Unity: ToggleFlashlight");

            // –ó–¥–µ—Å—å –¥–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–ø—ã—à–∫–æ–π
            // –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ ARCameraManager

            SendMessage("flashlightToggled", "Flashlight toggled");
      }


      #endregion

      #region Unity to Flutter Communication

      /// <summary>
      /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Flutter
      /// </summary>
      /// <param name="eventType">–¢–∏–ø —Å–æ–±—ã—Ç–∏—è</param>
      /// <param name="data">–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏</param>
      public void SendMessage(string eventType, string data)
      {
            string message = $"{eventType}:{data}";
            if (debugMode)
            {
                  Debug.Log($"üì§ Unity -> Flutter: {message}");
            }

            SendToFlutter.Send(message);
      }

      /// <summary>
      /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
      /// </summary>
      public void SendSegmentationState()
      {
            if (segmentationManager != null)
            {
                  // –£–±–µ–¥–∏–º—Å—è —á—Ç–æ –≤ AsyncSegmentationManager –µ—Å—Ç—å —ç—Ç–∏ —Å–≤–æ–π—Å—Ç–≤–∞
                  var state = new
                  {
                        // isProcessing = segmentationManager.IsActive,
                        currentColor = ColorUtility.ToHtmlStringRGB(segmentationManager.paintColor)
                        // selectedClass = 0 // walls
                  };

                  string jsonState = JsonUtility.ToJson(state);
                  SendMessage("onSegmentationStateChanged", jsonState);
            }
      }

      /// <summary>
      /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      /// </summary>
      /// <param name="error">–û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏</param>
      public void SendError(string error)
      {
            SendMessage("error", error);
      }

      #endregion

      private void OnApplicationPause(bool pauseStatus)
      {
            if (debugMode)
            {
                  Debug.Log($"üîÑ Application pause: {pauseStatus}");
            }

            SendMessage("onUnityPause", pauseStatus.ToString());
      }

      private void OnApplicationFocus(bool hasFocus)
      {
            if (debugMode)
            {
                  Debug.Log($"üéØ Application focus: {hasFocus}");
            }

            SendMessage("onUnityFocus", hasFocus.ToString());
      }
}