using UnityEngine;
using UnityEngine.XR.ARFoundation;
using UnityEngine.XR.ARSubsystems;

/// <summary>
/// –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π –æ–∫—Ä–∞—à–µ–Ω–Ω–æ–π —Å—Ç–µ–Ω—ã –≤ AR.
/// –ü–æ–ª—É—á–∞–µ—Ç –º–∞—Å–∫—É —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Å–≤–µ—â–µ–Ω–∏–∏,
/// –∞ –∑–∞—Ç–µ–º –ø–µ—Ä–µ–¥–∞–µ—Ç –∏—Ö –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —à–µ–π–¥–µ—Ä –¥–ª—è —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞.
/// </summary>
[RequireComponent(typeof(Renderer))]
public class ARWallPresenter : MonoBehaviour
{
    [Header("–°—Å—ã–ª–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")]
    [Tooltip("–ú–∞—Ç–µ—Ä–∏–∞–ª, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π —à–µ–π–¥–µ—Ä –¥–ª—è —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –æ–∫—Ä–∞—Å–∫–∏ —Å—Ç–µ–Ω.")]
    [SerializeField]
    private Material wallPaintMaterial;

    [Tooltip("–ë–∞–∑–æ–≤—ã–π —Ü–≤–µ—Ç –∫—Ä–∞—Å–∫–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏.")]
    [SerializeField]
    private Color paintColor = Color.blue;

    [Tooltip("–ù–∞—Å–∫–æ–ª—å–∫–æ –º—è–≥–∫–∏–º –±—É–¥–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ –æ–∫—Ä–∞—à–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç fwidth-based —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 0.1 (—Ä–µ–∑–∫–∏–µ) - 5.0 (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ).")]
    [Range(0.1f, 5.0f)]
    [SerializeField]
    private float edgeSoftness = 3.0f; // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –±–æ–ª–µ–µ –º—è–≥–∫–∏—Ö –∫—Ä–∞–µ–≤

    [Tooltip("–°—Å—ã–ª–∫–∞ –Ω–∞ AR Camera Manager –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å–≤–µ—â–µ–Ω–∏–∏.")]
    [SerializeField]
    private ARCameraManager arCameraManager;

    [Header("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏")]
    [Tooltip("–û—Ç—Ä–∞–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ (–µ—Å–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç —Å–¥–≤–∏–Ω—É—Ç –≤–ª–µ–≤–æ/–≤–ø—Ä–∞–≤–æ)")]
    [SerializeField]
    private bool flipHorizontally = false;

    [Tooltip("–û—Ç—Ä–∞–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ (–µ—Å–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç –≤–≤–µ—Ä—Ö –Ω–æ–≥–∞–º–∏)")]
    [SerializeField]
    private bool flipVertically = false;

    [Tooltip("–ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å–∫—É (–µ—Å–ª–∏ –∫—Ä–∞—Å–∏—Ç—Å—è –≤—Å—ë –∫—Ä–æ–º–µ —Å—Ç–µ–Ω, –≤–∫–ª—é—á–∏—Ç–µ —ç—Ç—É –æ–ø—Ü–∏—é)")]
    [SerializeField]
    private bool invertMask = true;

    [Tooltip("–†–µ–∂–∏–º —Å–º–µ—à–∏–≤–∞–Ω–∏—è: 0 = Luminance (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Å–≤–µ—â–µ–Ω–∏–µ), 1 = Overlay (–±–æ–ª–µ–µ —è—Ä–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç).")]
    [Range(0.0f, 1.0f)]
    [SerializeField]
    private float blendMode = 1.0f; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é Overlay

    [Header("üß™ –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã Edge Softness")]
    [Tooltip("–ë—ã—Å—Ç—Ä–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∑–∫–∏–µ –∫—Ä–∞—è (0.1)")]
    [SerializeField]
    private bool applySharpEdges = false;
    
    [Tooltip("–ë—ã—Å—Ç—Ä–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–º–µ—Ä–µ–Ω–Ω—ã–µ –∫—Ä–∞—è (1.0)")]
    [SerializeField]
    private bool applySoftEdges = false;
    
    [Tooltip("–ë—ã—Å—Ç—Ä–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º—è–≥–∫–∏–µ –∫—Ä–∞—è (2.5)")]
    [SerializeField]
    private bool applyMediumBlur = false;
    
    [Tooltip("–ë—ã—Å—Ç—Ä–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑–º—ã—Ç–∏–µ (5.0)")]
    [SerializeField]
    private bool applyMaxBlur = false;

    [Header("üé® –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã Blend Mode")]
    [Tooltip("–ë—ã—Å—Ç—Ä–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Luminance —Ä–µ–∂–∏–º (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Å–≤–µ—â–µ–Ω–∏–µ)")]
    [SerializeField]
    private bool applyLuminanceMode = false;
    
    [Tooltip("–ë—ã—Å—Ç—Ä–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Overlay —Ä–µ–∂–∏–º (—è—Ä–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç)")]
    [SerializeField]
    private bool applyOverlayMode = false;
    
    [Tooltip("–ë—ã—Å—Ç—Ä–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–∏–±—Ä–∏–¥–Ω—ã–π —Ä–µ–∂–∏–º (50/50)")]
    [SerializeField]
    private bool applyHybridMode = false;

    [Header("‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")]
    [Tooltip("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–µ–π–¥–µ—Ä —Å half precision")]
    [SerializeField]
    private bool useOptimizedShader = false;
    
    [Tooltip("–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª")]
    [SerializeField]
    private Material optimizedMaterial;
    
    [Tooltip("–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª")]
    [SerializeField]
    private Material standardMaterial;

    [Header("üåü –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ")]
    [Tooltip("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —à–µ–π–¥–µ—Ä —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º")]
    [SerializeField]
    private bool usePhotorealisticShader = false;
    
    [Tooltip("–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª")]
    [SerializeField]
    private Material photorealisticMaterial;
    


    private Renderer _renderer;
    private MaterialPropertyBlock _propertyBlock;

    // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Å–≤–æ–π—Å—Ç–≤ —à–µ–π–¥–µ—Ä–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    private static readonly int MaskTexId = Shader.PropertyToID("_SegmentationMask");
    private static readonly int PaintColorId = Shader.PropertyToID("_PaintColor");
    private static readonly int GlobalBrightnessId = Shader.PropertyToID("_GlobalBrightness");
    private static readonly int RealWorldLightColorId = Shader.PropertyToID("_RealWorldLightColor");
    private static readonly int EdgeSoftnessId = Shader.PropertyToID("_EdgeSoftness");
    private static readonly int FlipHorizontallyId = Shader.PropertyToID("_FlipHorizontally");
    private static readonly int FlipVerticallyId = Shader.PropertyToID("_FlipVertically");
    private static readonly int InvertMaskId = Shader.PropertyToID("_InvertMask");
    private static readonly int BlendModeId = Shader.PropertyToID("_BlendMode");
    private static readonly int LitPaintColorId = Shader.PropertyToID("_LitPaintColor");

    void Awake()
    {
        _renderer = GetComponent<Renderer>();
        _propertyBlock = new MaterialPropertyBlock();

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        if (wallPaintMaterial != null)
        {
            _renderer.material = wallPaintMaterial;
        }
        else
        {
            Debug.LogError("–ú–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –æ–∫—Ä–∞—Å–∫–∏ —Å—Ç–µ–Ω (wallPaintMaterial) –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω!");
            this.enabled = false;
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç –∏ –º—è–≥–∫–æ—Å—Ç—å –∫—Ä–∞–µ–≤
        _propertyBlock.SetColor(PaintColorId, paintColor);
        _propertyBlock.SetFloat(EdgeSoftnessId, edgeSoftness);
        _propertyBlock.SetFloat(FlipHorizontallyId, flipHorizontally ? 1.0f : 0.0f);
        _propertyBlock.SetFloat(FlipVerticallyId, flipVertically ? 1.0f : 0.0f);
        _propertyBlock.SetFloat(InvertMaskId, invertMask ? 1.0f : 0.0f);
        _propertyBlock.SetFloat(BlendModeId, blendMode);
        _renderer.SetPropertyBlock(_propertyBlock);
    }

    void OnEnable()
    {
        if (arCameraManager != null)
        {
            arCameraManager.frameReceived += OnFrameReceived;
        }
        else
        {
             Debug.LogError("ARCameraManager –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω! –î–∞–Ω–Ω—ã–µ –æ–± –æ—Å–≤–µ—â–µ–Ω–∏–∏ –Ω–µ –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è.");
        }
    }

    void Start()
    {
        FitToScreen(); // –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ AsyncSegmentationManager –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å—Ç–µ–Ω—ã
        var segmentationManager = FindObjectOfType<AsyncSegmentationManager>();
        if (segmentationManager != null)
        {
            segmentationManager.ShowOnlyWalls();
            Debug.Log("üß± ARWallPresenter –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —Ä–µ–∂–∏–º —Ç–æ–ª—å–∫–æ —Å—Ç–µ–Ω");
        }
        
        // üö® –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ø—Ä–∏–º–µ–Ω—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –∫—Ä–∞–µ–≤
        edgeSoftness = 5.0f; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        SetEdgeSoftness(edgeSoftness);
        Debug.Log($"üéØ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –∫—Ä–∞–µ–≤: {edgeSoftness}");
    }

    void OnDisable()
    {
        if (arCameraManager != null)
        {
            arCameraManager.frameReceived -= OnFrameReceived;
        }
    }

    void Update()
    {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤ Edge Softness
        if (applySharpEdges)
        {
            applySharpEdges = false;
            SetEdgeSoftness(0.1f);
            // Debug.Log("üîß –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ä–µ–∑–∫–∏–µ –∫—Ä–∞—è: 0.1");
        }
        
        if (applySoftEdges)
        {
            applySoftEdges = false;
            SetEdgeSoftness(1.0f);
            // Debug.Log("üîß –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É–º–µ—Ä–µ–Ω–Ω—ã–µ –∫—Ä–∞—è: 1.0");
        }
        
        if (applyMediumBlur)
        {
            applyMediumBlur = false;
            SetEdgeSoftness(2.5f);
            // Debug.Log("üîß –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –º—è–≥–∫–∏–µ –∫—Ä–∞—è: 2.5");
        }
        
        if (applyMaxBlur)
        {
            applyMaxBlur = false;
            SetEdgeSoftness(5.0f);
            // Debug.Log("üîß –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑–º—ã—Ç–∏–µ: 5.0");
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤ Blend Mode
        if (applyLuminanceMode)
        {
            applyLuminanceMode = false;
            SetBlendMode(0.0f);
            // Debug.Log("üé® –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∂–∏–º —Å–º–µ—à–∏–≤–∞–Ω–∏—è: Luminance (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç—É—Ä—É –∏ –æ—Å–≤–µ—â–µ–Ω–∏–µ)");
        }
        
        if (applyOverlayMode)
        {
            applyOverlayMode = false;
            SetBlendMode(1.0f);
            // Debug.Log("üé® –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∂–∏–º —Å–º–µ—à–∏–≤–∞–Ω–∏—è: Overlay (—è—Ä–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç)");
        }
        
        if (applyHybridMode)
        {
            applyHybridMode = false;
            SetBlendMode(0.5f);
            // Debug.Log("üé® –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∂–∏–º —Å–º–µ—à–∏–≤–∞–Ω–∏—è: –ì–∏–±—Ä–∏–¥–Ω—ã–π (50% Luminance + 50% Overlay)");
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —à–µ–π–¥–µ—Ä–æ–≤ (–ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É)
        Material targetMaterial = null;
        
        if (usePhotorealisticShader && photorealisticMaterial != null)
        {
            targetMaterial = photorealisticMaterial;
        }
        else if (useOptimizedShader && optimizedMaterial != null)
        {
            targetMaterial = optimizedMaterial;
        }
        else if (standardMaterial != null)
        {
            targetMaterial = standardMaterial;
        }
        
        if (targetMaterial != null && _renderer.material != targetMaterial)
        {
            _renderer.material = targetMaterial;
            // –õ–æ–≥ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        }
    }

    /// <summary>
    /// –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑–≤–Ω–µ (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ AsyncSegmentationManager)
    /// –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –º–∞—Å–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏.
    /// </summary>
    /// <param name="maskTexture">–¢–µ–∫—Å—Ç—É—Ä–∞ —Å –º–∞—Å–∫–æ–π —Å—Ç–µ–Ω.</param>
    public void SetSegmentationMask(Texture maskTexture)
    {
        if (maskTexture == null)
        {
            // –ò–Ω–æ–≥–¥–∞ –º–æ–∂–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø—É—Å—Ç–∞—è –º–∞—Å–∫–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ–µ
            return; 
        }

        if (_propertyBlock != null)
        {
            _propertyBlock.SetTexture(MaskTexId, maskTexture);
            _renderer.SetPropertyBlock(_propertyBlock);
        }
    }

    private void OnFrameReceived(ARCameraFrameEventArgs eventArgs)
    {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º GetPropertyBlock, —á—Ç–æ–±—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –º—É—Å–æ—Ä (GC) –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä
        _renderer.GetPropertyBlock(_propertyBlock);
        bool needsUpdate = false;

        if (eventArgs.lightEstimation.averageBrightness.HasValue)
        {
            float brightness = eventArgs.lightEstimation.averageBrightness.Value;
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —è—Ä–∫–æ—Å—Ç—å, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –±–æ–ª—å—à–µ –Ω—É–ª—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —á–µ—Ä–Ω—ã—Ö –≤—Å–ø—ã—à–µ–∫
            if (brightness > 0.01f) 
            {
                _propertyBlock.SetFloat(GlobalBrightnessId, brightness);
                needsUpdate = true;
            }
        }
        
        if (eventArgs.lightEstimation.colorCorrection.HasValue)
        {
            Color colorCorrection = eventArgs.lightEstimation.colorCorrection.Value;
            _propertyBlock.SetColor(RealWorldLightColorId, colorCorrection);
            needsUpdate = true;
        }

        // OPTIMIZATION: –ü—Ä–µ–¥–≤—ã—á–∏—Å–ª—è–µ–º lit paint color –Ω–∞ CPU
        if (needsUpdate)
        {
            UpdatePrecomputedLitPaintColor();
            _renderer.SetPropertyBlock(_propertyBlock);
        }
    }

    /// <summary>
    /// OPTIMIZATION: –ü—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –∫—Ä–∞—Å–∫–∏ –Ω–∞ CPU –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ GPU
    /// </summary>
    private void UpdatePrecomputedLitPaintColor()
    {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        float globalBrightness = _propertyBlock.GetFloat(GlobalBrightnessId);
        Color realWorldLightColor = _propertyBlock.GetColor(RealWorldLightColorId);
        
        // –ü—Ä–µ–¥–≤—ã—á–∏—Å–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ü–≤–µ—Ç –Ω–∞ CPU
        Color litPaintColor = new Color(
            paintColor.r * realWorldLightColor.r * globalBrightness,
            paintColor.g * realWorldLightColor.g * globalBrightness,
            paintColor.b * realWorldLightColor.b * globalBrightness,
            paintColor.a
        );
        
        // –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —à–µ–π–¥–µ—Ä
        _propertyBlock.SetColor(LitPaintColorId, litPaintColor);
    }
    
    // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Å–º–µ–Ω—ã —Ü–≤–µ—Ç–∞ –∏–∑ UI
    public void SetPaintColor(Color newColor)
    {
        paintColor = newColor;
        if (_propertyBlock != null)
        {
            _propertyBlock.SetColor(PaintColorId, paintColor);
            _renderer.SetPropertyBlock(_propertyBlock);
        }
    }

    public void SetEdgeSoftness(float newSoftness)
    {
        edgeSoftness = newSoftness;
        if (_propertyBlock != null)
        {
            _propertyBlock.SetFloat(EdgeSoftnessId, edgeSoftness);
            _renderer.SetPropertyBlock(_propertyBlock);
        }
    }

    /// <summary>
    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∂–∏–º —Å–º–µ—à–∏–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–æ–≤
    /// </summary>
    /// <param name="newBlendMode">–ù–æ–≤—ã–π —Ä–µ–∂–∏–º —Å–º–µ—à–∏–≤–∞–Ω–∏—è (0 = Luminance, 1 = Overlay)</param>
    public void SetBlendMode(float newBlendMode)
    {
        blendMode = Mathf.Clamp01(newBlendMode);
        if (_propertyBlock != null)
        {
            _propertyBlock.SetFloat(BlendModeId, blendMode);
            _renderer.SetPropertyBlock(_propertyBlock);
        }
    }

    /// <summary>
    /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –∏ –ø–æ–∑–∏—Ü–∏—é –ø–ª–æ—Å–∫–æ—Å—Ç–∏
    /// –í—ã–∑—ã–≤–∞–π—Ç–µ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥, –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è –∏–ª–∏ –ø–ª–æ—Å–∫–æ—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
    /// </summary>
    [ContextMenu("–û–±–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–º–µ—Ä –ø–ª–æ—Å–∫–æ—Å—Ç–∏")]
    public void RefreshScreenFit()
    {
        FitToScreen();
        Debug.Log("üîÑ –†–∞–∑–º–µ—Ä ARWallPresenter –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω");
    }

    /// <summary>
    /// –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ
    /// </summary>
    [ContextMenu("–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ")]
    public void ToggleFlipHorizontally()
    {
        flipHorizontally = !flipHorizontally;
        if (_propertyBlock != null)
        {
            _propertyBlock.SetFloat(FlipHorizontallyId, flipHorizontally ? 1.0f : 0.0f);
            _renderer.SetPropertyBlock(_propertyBlock);
            Debug.Log($"üîÑ –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ: {(flipHorizontally ? "–í–∫–ª—é—á–µ–Ω–æ" : "–í—ã–∫–ª—é—á–µ–Ω–æ")}");
        }
    }

    /// <summary>
    /// –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ
    /// </summary>
    [ContextMenu("–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ")]
    public void ToggleFlipVertically()
    {
        flipVertically = !flipVertically;
        if (_propertyBlock != null)
        {
            _propertyBlock.SetFloat(FlipVerticallyId, flipVertically ? 1.0f : 0.0f);
            _renderer.SetPropertyBlock(_propertyBlock);
            Debug.Log($"üîÑ –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ: {(flipVertically ? "–í–∫–ª—é—á–µ–Ω–æ" : "–í—ã–∫–ª—é—á–µ–Ω–æ")}");
        }
    }



    /// <summary>
    /// –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∏–Ω–≤–µ—Ä—Å–∏—é –º–∞—Å–∫–∏
    /// </summary>
    [ContextMenu("–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∏–Ω–≤–µ—Ä—Å–∏—é –º–∞—Å–∫–∏")]
    public void ToggleInvertMask()
    {
        invertMask = !invertMask;
        if (_propertyBlock != null)
        {
            _propertyBlock.SetFloat(InvertMaskId, invertMask ? 1.0f : 0.0f);
            _renderer.SetPropertyBlock(_propertyBlock);
            Debug.Log($"üîÑ –ò–Ω–≤–µ—Ä—Å–∏—è –º–∞—Å–∫–∏: {(invertMask ? "–í–∫–ª—é—á–µ–Ω–∞" : "–í—ã–∫–ª—é—á–µ–Ω–∞")}");
        }
    }

    /// <summary>
    /// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
    /// </summary>
    [ContextMenu("–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —à–µ–π–¥–µ—Ä")]
    public void SwitchToPhotorealisticShader()
    {
        usePhotorealisticShader = true;
        useOptimizedShader = false;
        Debug.Log("üåü –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —à–µ–π–¥–µ—Ä —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º");
    }

    [ContextMenu("–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–µ–π–¥–µ—Ä")]
    public void SwitchToOptimizedShader()
    {
        usePhotorealisticShader = false;
        useOptimizedShader = true;
        Debug.Log("‚ö° –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–µ–π–¥–µ—Ä");
    }

    [ContextMenu("–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à–µ–π–¥–µ—Ä")]
    public void SwitchToStandardShader()
    {
        usePhotorealisticShader = false;
        useOptimizedShader = false;
        Debug.Log("üîß –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à–µ–π–¥–µ—Ä");
    }

    /// <summary>
    /// –†–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç Quad-–æ–±—ä–µ–∫—Ç, —á—Ç–æ–±—ã –æ–Ω –∏–¥–µ–∞–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω—è–ª —ç–∫—Ä–∞–Ω –∫–∞–º–µ—Ä—ã.
    /// –†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —Å –æ—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π, —Ç–∞–∫ –∏ —Å –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–æ–µ–∫—Ü–∏–µ–π.
    /// </summary>
    private void FitToScreen()
    {
        if (arCameraManager == null)
        {
            Debug.LogWarning("ARCameraManager –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω!");
            return;
        }

        Camera arCamera = arCameraManager.GetComponent<Camera>();
        if (arCamera == null)
        {
            Debug.LogWarning("Camera component –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ ARCameraManager!");
            return;
        }

        // –î–µ–ª–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–æ—á–µ—Ä–Ω–∏–º –∫ –∫–∞–º–µ—Ä–µ, —á—Ç–æ–±—ã –æ–Ω –≤—Å–µ–≥–¥–∞ –±—ã–ª –ø–µ—Ä–µ–¥ –Ω–µ–π
        transform.SetParent(arCameraManager.transform, false);
        transform.localPosition = Vector3.zero;
        transform.localRotation = Quaternion.identity;
        
        // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –∫–∞–º–µ—Ä—ã (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–ª–µ–∫–æ –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è –≤—Å–µ–π —Å—Ü–µ–Ω—ã)
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ ~3 –º–µ—Ç—Ä–∞ –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è AR —Å—Ü–µ–Ω—ã
        float distance = 3.0f;
        
        float planeWidth, planeHeight;
        
        if (arCamera.orthographic)
        {
            // –î–ª—è –æ—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –∫–∞–º–µ—Ä—ã
            planeHeight = arCamera.orthographicSize * 2.0f;
            planeWidth = planeHeight * arCamera.aspect;
        }
        else
        {
            // –î–ª—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–π –∫–∞–º–µ—Ä—ã (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ –¥–ª—è AR)
            float halfFOV = arCamera.fieldOfView * 0.5f * Mathf.Deg2Rad;
            planeHeight = 2.0f * distance * Mathf.Tan(halfFOV);
            planeWidth = planeHeight * arCamera.aspect;
        }

        transform.localPosition = new Vector3(0, 0, distance);
        transform.localScale = new Vector3(planeWidth, planeHeight, 1);
        
        Debug.Log($"üñºÔ∏è ARWallPresenter —Ä–∞–∑–º–µ—Ä—ã: Width={planeWidth:F2}, Height={planeHeight:F2}, Distance={distance:F2}");
        Debug.Log($"üì∑ –ö–∞–º–µ—Ä–∞: FOV={arCamera.fieldOfView:F1}¬∞, Aspect={arCamera.aspect:F2}, Orthographic={arCamera.orthographic}");
    }
}
