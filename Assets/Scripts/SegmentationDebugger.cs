using UnityEngine;
using UnityEngine.UI;
using TMPro;

/// <summary>
/// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –æ—Ç–ª–∞–¥–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
/// </summary>
public class SegmentationDebugger : MonoBehaviour
{
      [Header("–û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")]
      [SerializeField] private AsyncSegmentationManager segmentationManager;
      [SerializeField] private RawImage debugDisplay;
      [SerializeField] private TextMeshProUGUI debugText;
      [SerializeField] private Button maxAccuracyButton;
      [SerializeField] private Button balancedModeButton;
      [SerializeField] private Button toggleSmoothingButton;

      [Header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ª–∞–¥–∫–∏")]
      [SerializeField] private bool showDebugInfo = true;
      [SerializeField] private bool showRawMaskValues = false;
      [SerializeField] private float updateInterval = 1.0f;

      private float lastUpdateTime;
      private int frameCount;
      private float fps;

      void Start()
      {
            if (segmentationManager == null)
                  segmentationManager = FindObjectOfType<AsyncSegmentationManager>();

            SetupButtons();

            if (debugText != null && showDebugInfo)
            {
                  debugText.text = "–û—Ç–ª–∞–¥–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–∞\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ—á–Ω–æ—Å—Ç—å –Ω–∞ –ª—é–¥—è—Ö –≤ –∫–∞–¥—Ä–µ";
            }
      }

      void Update()
      {
            if (showDebugInfo && Time.time - lastUpdateTime > updateInterval)
            {
                  UpdateDebugInfo();
                  lastUpdateTime = Time.time;
            }

            // –û—Ç–ª–∞–¥–∫–∞ –ø–æ –∫–ª–∏–∫—É: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—á–∫–µ
            if (Input.GetMouseButtonDown(0) && !UnityEngine.EventSystems.EventSystem.current.IsPointerOverGameObject())
            {
                  DebugClickPosition(Input.mousePosition);
            }

            frameCount++;
            if (Time.time > 0)
                  fps = frameCount / Time.time;
      }

      private void SetupButtons()
      {
            if (maxAccuracyButton != null)
            {
                  maxAccuracyButton.onClick.AddListener(() =>
                  {
                        if (segmentationManager != null)
                        {
                              segmentationManager.EnableMaxAccuracyMode();
                              UpdateDebugText("üéØ –†–ï–ñ–ò–ú –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ô –¢–û–ß–ù–û–°–¢–ò –ê–ö–¢–ò–í–ò–†–û–í–ê–ù");
                        }
                  });
            }

            if (balancedModeButton != null)
            {
                  balancedModeButton.onClick.AddListener(() =>
                  {
                        if (segmentationManager != null)
                        {
                              segmentationManager.EnableBalancedMode();
                              UpdateDebugText("‚öñÔ∏è –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–´–ô –†–ï–ñ–ò–ú –ê–ö–¢–ò–í–ò–†–û–í–ê–ù");
                        }
                  });
            }

            if (toggleSmoothingButton != null)
            {
                  toggleSmoothingButton.onClick.AddListener(() =>
                  {
                        if (segmentationManager != null)
                        {
                              segmentationManager.ToggleSmoothing();
                              UpdateDebugText("üîÑ –°–ì–õ–ê–ñ–ò–í–ê–ù–ò–ï –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–û");
                        }
                  });
            }
      }

      private void UpdateDebugInfo()
      {
            if (debugText == null || segmentationManager == null) return;

            var mask = segmentationManager.GetCurrentSegmentationMask();
            string debugInfo = $"–û–¢–õ–ê–î–ö–ê –°–ï–ì–ú–ï–ù–¢–ê–¶–ò–ò\n";
            debugInfo += $"FPS: {fps:F1}\n";
            debugInfo += $"–ú–∞—Å–∫–∞: {(mask != null ? $"{mask.width}x{mask.height}" : "–ù–ï–¢")}\n";
            debugInfo += $"–≠–∫—Ä–∞–Ω: {Screen.width}x{Screen.height}\n";
            debugInfo += $"–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è: {(Screen.height > Screen.width ? "–ü–æ—Ä—Ç—Ä–µ—Ç" : "–õ–∞–Ω–¥—à–∞—Ñ—Ç")}\n";

            if (mask != null)
            {
                  debugInfo += $"–§–æ—Ä–º–∞—Ç –º–∞—Å–∫–∏: {mask.format}\n";
                  debugInfo += $"–ì–æ—Ç–æ–≤–∞: {(segmentationManager.IsSegmentationMaskReady() ? "–î–ê" : "–ù–ï–¢")}\n";
            }

            debugInfo += "\nüéØ –°–û–í–ï–¢–´ –ü–û –¢–û–ß–ù–û–°–¢–ò:\n";
            debugInfo += "‚Ä¢ –õ—é–¥–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ö–†–ê–°–ù–´–ú–ò\n";
            debugInfo += "‚Ä¢ –°—Ç–µ–Ω—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –°–ï–†–´–ú–ò\n";
            debugInfo += "‚Ä¢ –ï—Å–ª–∏ –ª—é–¥–∏ —Å–∏–Ω–∏–µ ‚Üí –ø—Ä–æ–±–ª–µ–º–∞ —Å –º–æ–¥–µ–ª—å—é\n";
            debugInfo += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n";

            debugText.text = debugInfo;
      }

      private void DebugClickPosition(Vector2 screenPos)
      {
            if (segmentationManager == null) return;

            Vector2 screenUV = new Vector2(screenPos.x / Screen.width, screenPos.y / Screen.height);

            string clickInfo = $"–ö–õ–ò–ö: ({screenPos.x:F0}, {screenPos.y:F0})\n";
            clickInfo += $"UV: ({screenUV.x:F3}, {screenUV.y:F3})\n";
            clickInfo += $"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∞—Å—Å–µ";

            UpdateDebugText(clickInfo);

            Debug.Log($"üîç –û–¢–õ–ê–î–ö–ê –ö–õ–ò–ö–ê: —ç–∫—Ä–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã {screenPos}, UV {screenUV}");
      }

      private void UpdateDebugText(string message)
      {
            if (debugText != null)
            {
                  debugText.text = message + "\n\n" + debugText.text.Split('\n')[0];
            }
            Debug.Log($"üîß –û–¢–õ–ê–î–ß–ò–ö –°–ï–ì–ú–ï–ù–¢–ê–¶–ò–ò: {message}");
      }

      /// <summary>
      /// –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—ã—Ä—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –º–∞—Å–∫–∏
      /// </summary>
      [ContextMenu("–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø–æ–∫–∞–∑ —Å—ã—Ä—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")]
      public void ToggleRawValues()
      {
            showRawMaskValues = !showRawMaskValues;

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ –º–∞—Ç–µ—Ä–∏–∞–ª–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            if (segmentationManager != null)
            {
                  var material = segmentationManager.GetComponent<RawImage>()?.material;
                  if (material != null)
                  {
                        material.SetFloat("_ShowRawValues", showRawMaskValues ? 1.0f : 0.0f);
                  }
            }

            UpdateDebugText($"–°—ã—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–∞—Å–∫–∏: {(showRawMaskValues ? "–í–ö–õ–Æ–ß–ï–ù–´" : "–í–´–ö–õ–Æ–ß–ï–ù–´")}");
      }

      /// <summary>
      /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      /// </summary>
      [ContextMenu("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")]
      public void ForceDiagnostics()
      {
            if (segmentationManager != null)
            {
                  Debug.Log("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ï–ì–ú–ï–ù–¢–ê–¶–ò–ò:");
                  Debug.Log($"  - –ú–∞—Å–∫–∞ –≥–æ—Ç–æ–≤–∞: {segmentationManager.IsSegmentationMaskReady()}");

                  var mask = segmentationManager.GetCurrentSegmentationMask();
                  if (mask != null)
                  {
                        Debug.Log($"  - –†–∞–∑–º–µ—Ä –º–∞—Å–∫–∏: {mask.width}x{mask.height}");
                        Debug.Log($"  - –§–æ—Ä–º–∞—Ç: {mask.format}");
                        Debug.Log($"  - –°–æ–∑–¥–∞–Ω–∞: {mask.IsCreated()}");
                  }
                  else
                  {
                        Debug.LogWarning("  - –ú–ê–°–ö–ê –ù–ï –î–û–°–¢–£–ü–ù–ê!");
                  }

                  UpdateDebugText("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å");
            }
      }

      void OnGUI()
      {
            if (!showDebugInfo) return;

            GUILayout.BeginArea(new Rect(10, 10, 300, 150));
            GUILayout.BeginVertical("box");

            GUILayout.Label("–ë–´–°–¢–†–´–ï –ö–û–ú–ê–ù–î–´ –û–¢–õ–ê–î–ö–ò:");

            if (GUILayout.Button("üéØ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å"))
            {
                  segmentationManager?.EnableMaxAccuracyMode();
            }

            if (GUILayout.Button("‚öñÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º"))
            {
                  segmentationManager?.EnableBalancedMode();
            }

            if (GUILayout.Button("üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å —Å—ã—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è"))
            {
                  ToggleRawValues();
            }

            if (GUILayout.Button("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"))
            {
                  segmentationManager?.RefreshScreenCoverage();
            }

            GUILayout.EndVertical();
            GUILayout.EndArea();
      }
}
