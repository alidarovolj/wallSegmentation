using System.Collections.Generic;
using UnityEngine;

/// <summary>
/// –ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
/// </summary>
public interface ICommand
{
      void Execute();
      void Undo();
}

/// <summary>
/// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏—è —Ü–µ–ª–æ–≥–æ –∫–ª–∞—Å—Å–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π.
/// </summary>
public class PaintCommand : ICommand
{
      private PaintManager _paintManager;
      private int _classId;

      // –ù–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –ø–æ–∫—Ä–∞—Å–∫–∏
      private Color _newColor;
      private int _newBlendMode;
      private float _newMetallic;
      private float _newSmoothness;

      // –ü—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã
      private Color _previousColor;
      private int _previousBlendMode;
      private float _previousMetallic;
      private float _previousSmoothness;

      public PaintCommand(PaintManager paintManager, int classId, Color newColor, int newBlendMode, float newMetallic = 0f, float newSmoothness = 0.5f)
      {
            _paintManager = paintManager;
            _classId = classId;
            _newColor = newColor;
            _newBlendMode = newBlendMode;
            _newMetallic = newMetallic;
            _newSmoothness = newSmoothness;
      }

      public void Execute()
      {
            // –ü–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ (—Å—Ç–∞—Ä—ã–µ) —Å–≤–æ–π—Å—Ç–≤–∞ –∫–ª–∞—Å—Å–∞
            (_previousColor, _previousBlendMode, _previousMetallic, _previousSmoothness) = _paintManager.GetPaintPropertiesForClass(_classId);

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
            _paintManager.SetPaintPropertiesForClass(_classId, _newColor, _newBlendMode, _newMetallic, _newSmoothness);

            Debug.Log($"üé® –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: –ü–æ–∫—Ä–∞—à–µ–Ω –∫–ª–∞—Å—Å {_classId} —Ü–≤–µ—Ç–æ–º {_newColor}");
      }

      public void Undo()
      {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
            _paintManager.SetPaintPropertiesForClass(_classId, _previousColor, _previousBlendMode, _previousMetallic, _previousSmoothness);

            Debug.Log($"‚è™ –û—Ç–º–µ–Ω–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –∫–ª–∞—Å—Å–∞ {_classId}");
      }
}


/// <summary>
/// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –æ–∫—Ä–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π.
/// </summary>
public class ClearAllPaintCommand : ICommand
{
      private PaintManager _paintManager;

      // –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
      private Dictionary<int, (Color color, int blendMode, float metallic, float smoothness)> _previousStates;

      public ClearAllPaintCommand(PaintManager paintManager)
      {
            _paintManager = paintManager;
            _previousStates = new Dictionary<int, (Color, int, float, float)>();
      }

      public void Execute()
      {
            _previousStates.Clear();
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –æ–∫—Ä–∞—à–µ–Ω
            for (int i = 0; i < 32; i++) // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º MaxClasses = 32
            {
                  var props = _paintManager.GetPaintPropertiesForClass(i);
                  if (props.color.a > 0) // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–ª–∞—Å—Å –±—ã–ª –æ–∫—Ä–∞—à–µ–Ω
                  {
                        _previousStates[i] = props;
                  }
            }

            _paintManager.ClearAllPaint();
            Debug.Log("üóëÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: –í—Å—è –ø–æ–∫—Ä–∞—Å–∫–∞ –æ—á–∏—â–µ–Ω–∞.");
      }

      public void Undo()
      {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            foreach (var state in _previousStates)
            {
                  _paintManager.SetPaintPropertiesForClass(state.Key, state.Value.color, state.Value.blendMode, state.Value.metallic, state.Value.smoothness);
            }
            Debug.Log("‚è™ –û—Ç–º–µ–Ω–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –ø–æ–∫—Ä–∞—Å–∫–∞.");
      }
}

/// <summary>
/// –ú–µ–Ω–µ–¥–∂–µ—Ä, —É–ø—Ä–∞–≤–ª—è—é—â–∏–π —Å—Ç–µ–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è Undo/Redo.
/// </summary>
public class CommandManager : MonoBehaviour
{
      [Header("History Settings")]
      [SerializeField] private int maxHistorySize = 20;

      private Stack<ICommand> undoStack = new Stack<ICommand>();
      private Stack<ICommand> redoStack = new Stack<ICommand>();

      // –°–æ–±—ã—Ç–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
      public System.Action<bool> OnUndoAvailabilityChanged;
      public System.Action<bool> OnRedoAvailabilityChanged;

      public bool CanUndo => undoStack.Count > 0;
      public bool CanRedo => redoStack.Count > 0;

      void Start()
      {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π UI
            UpdateUIEvents();
      }

      /// <summary>
      /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ—ë –≤ –∏—Å—Ç–æ—Ä–∏—é
      /// </summary>
      public void ExecuteCommand(ICommand command)
      {
            // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
            command.Execute();

            // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ç–µ–∫ –æ—Ç–º–µ–Ω—ã
            undoStack.Push(command);

            // –û—á–∏—â–∞–µ–º —Å—Ç–µ–∫ –ø–æ–≤—Ç–æ—Ä–∞, —Ç–∞–∫ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
            redoStack.Clear();

            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
            if (undoStack.Count > maxHistorySize)
            {
                  var tempStack = new Stack<ICommand>();
                  for (int i = 0; i < maxHistorySize; i++)
                  {
                        tempStack.Push(undoStack.Pop());
                  }
                  undoStack.Clear();
                  while (tempStack.Count > 0)
                  {
                        undoStack.Push(tempStack.Pop());
                  }
            }

            UpdateUIEvents();
      }

      /// <summary>
      /// –û—Ç–º–µ–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
      /// </summary>
      public void Undo()
      {
            if (!CanUndo)
            {
                  Debug.LogWarning("‚ö†Ô∏è –ù–µ—Ç –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ—Ç–º–µ–Ω—ã");
                  return;
            }

            var command = undoStack.Pop();
            command.Undo();
            redoStack.Push(command);

            UpdateUIEvents();
      }

      /// <summary>
      /// –ü–æ–≤—Ç–æ—Ä—è–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
      /// </summary>
      public void Redo()
      {
            if (!CanRedo)
            {
                  Debug.LogWarning("‚ö†Ô∏è –ù–µ—Ç –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞");
                  return;
            }

            var command = redoStack.Pop();
            command.Execute();
            undoStack.Push(command);

            UpdateUIEvents();
      }

      /// <summary>
      /// –û—á–∏—â–∞–µ—Ç –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥
      /// </summary>
      public void ClearHistory()
      {
            undoStack.Clear();
            redoStack.Clear();
            UpdateUIEvents();
            Debug.Log("üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥ –æ—á–∏—â–µ–Ω–∞");
      }

      void UpdateUIEvents()
      {
            OnUndoAvailabilityChanged?.Invoke(CanUndo);
            OnRedoAvailabilityChanged?.Invoke(CanRedo);
      }

      /// <summary>
      /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–º–∞–Ω–¥–µ –≤ —Å—Ç–µ–∫–µ –æ—Ç–º–µ–Ω—ã
      /// </summary>
      public string GetLastUndoDescription()
      {
            return CanUndo ? undoStack.Peek().GetType().Name : "–ù–µ—Ç –∫–æ–º–∞–Ω–¥";
      }

      /// <summary>
      /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–º–∞–Ω–¥–µ –≤ —Å—Ç–µ–∫–µ –ø–æ–≤—Ç–æ—Ä–∞
      /// </summary>
      public string GetLastRedoDescription()
      {
            return CanRedo ? redoStack.Peek().GetType().Name : "–ù–µ—Ç –∫–æ–º–∞–Ω–¥";
      }
}